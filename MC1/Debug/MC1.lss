
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00002b06  00002b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800132  00800132  00002c6c  2**0
                  ALLOC
  3 .stab         0000273c  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da8  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a89f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <main>
      8a:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_pass>:
 * This function take the password from user, Save it in array,
 * Take the required message from user as we get password from user in different Cases,
 * Handle that if the user after enter the password must press on/c in our case,
 * else error message will appear
 * */
 void get_pass(char arr[50],uint8 sent_pass[7]){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e1 97       	sbiw	r28, 0x31	; 49
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9f a7       	std	Y+47, r25	; 0x2f
     b5c:	8e a7       	std	Y+46, r24	; 0x2e
     b5e:	79 ab       	std	Y+49, r23	; 0x31
     b60:	68 ab       	std	Y+48, r22	; 0x30
	uint8 key, i,j;
	LCD_sendCommand(CLEAR_COMMAND);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,arr);
     b68:	2e a5       	ldd	r18, Y+46	; 0x2e
     b6a:	3f a5       	ldd	r19, Y+47	; 0x2f
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	a9 01       	movw	r20, r18
     b72:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
	/* if any switch pressed for more than 500 ms it counts more than one press */
	for (i=0;i<5;i++){
     b7e:	1c a6       	std	Y+44, r1	; 0x2c
     b80:	85 c0       	rjmp	.+266    	; 0xc8c <get_pass+0x146>
		key = KeyPad_getPressedKey(); /* get the pressed key number */
     b82:	0e 94 75 09 	call	0x12ea	; 0x12ea <KeyPad_getPressedKey>
     b86:	8d a7       	std	Y+45, r24	; 0x2d
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	aa ef       	ldi	r26, 0xFA	; 250
     b8e:	b4 e4       	ldi	r27, 0x44	; 68
     b90:	8f a3       	std	Y+39, r24	; 0x27
     b92:	98 a7       	std	Y+40, r25	; 0x28
     b94:	a9 a7       	std	Y+41, r26	; 0x29
     b96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b98:	6f a1       	ldd	r22, Y+39	; 0x27
     b9a:	78 a5       	ldd	r23, Y+40	; 0x28
     b9c:	89 a5       	ldd	r24, Y+41	; 0x29
     b9e:	9a a5       	ldd	r25, Y+42	; 0x2a
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4a e7       	ldi	r20, 0x7A	; 122
     ba6:	53 e4       	ldi	r21, 0x43	; 67
     ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	8b a3       	std	Y+35, r24	; 0x23
     bb2:	9c a3       	std	Y+36, r25	; 0x24
     bb4:	ad a3       	std	Y+37, r26	; 0x25
     bb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bb8:	6b a1       	ldd	r22, Y+35	; 0x23
     bba:	7c a1       	ldd	r23, Y+36	; 0x24
     bbc:	8d a1       	ldd	r24, Y+37	; 0x25
     bbe:	9e a1       	ldd	r25, Y+38	; 0x26
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e8       	ldi	r20, 0x80	; 128
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bcc:	88 23       	and	r24, r24
     bce:	2c f4       	brge	.+10     	; 0xbda <get_pass+0x94>
		__ticks = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9a a3       	std	Y+34, r25	; 0x22
     bd6:	89 a3       	std	Y+33, r24	; 0x21
     bd8:	3f c0       	rjmp	.+126    	; 0xc58 <get_pass+0x112>
	else if (__tmp > 65535)
     bda:	6b a1       	ldd	r22, Y+35	; 0x23
     bdc:	7c a1       	ldd	r23, Y+36	; 0x24
     bde:	8d a1       	ldd	r24, Y+37	; 0x25
     be0:	9e a1       	ldd	r25, Y+38	; 0x26
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	57 e4       	ldi	r21, 0x47	; 71
     bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bee:	18 16       	cp	r1, r24
     bf0:	4c f5       	brge	.+82     	; 0xc44 <get_pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf2:	6f a1       	ldd	r22, Y+39	; 0x27
     bf4:	78 a5       	ldd	r23, Y+40	; 0x28
     bf6:	89 a5       	ldd	r24, Y+41	; 0x29
     bf8:	9a a5       	ldd	r25, Y+42	; 0x2a
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e2       	ldi	r20, 0x20	; 32
     c00:	51 e4       	ldi	r21, 0x41	; 65
     c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	bc 01       	movw	r22, r24
     c0c:	cd 01       	movw	r24, r26
     c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	9a a3       	std	Y+34, r25	; 0x22
     c18:	89 a3       	std	Y+33, r24	; 0x21
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <get_pass+0xf4>
     c1c:	89 e1       	ldi	r24, 0x19	; 25
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	98 a3       	std	Y+32, r25	; 0x20
     c22:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c24:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c26:	98 a1       	ldd	r25, Y+32	; 0x20
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <get_pass+0xe2>
     c2c:	98 a3       	std	Y+32, r25	; 0x20
     c2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9a a3       	std	Y+34, r25	; 0x22
     c38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3a:	89 a1       	ldd	r24, Y+33	; 0x21
     c3c:	9a a1       	ldd	r25, Y+34	; 0x22
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	69 f7       	brne	.-38     	; 0xc1c <get_pass+0xd6>
     c42:	14 c0       	rjmp	.+40     	; 0xc6c <get_pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c44:	6b a1       	ldd	r22, Y+35	; 0x23
     c46:	7c a1       	ldd	r23, Y+36	; 0x24
     c48:	8d a1       	ldd	r24, Y+37	; 0x25
     c4a:	9e a1       	ldd	r25, Y+38	; 0x26
     c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9a a3       	std	Y+34, r25	; 0x22
     c56:	89 a3       	std	Y+33, r24	; 0x21
     c58:	89 a1       	ldd	r24, Y+33	; 0x21
     c5a:	9a a1       	ldd	r25, Y+34	; 0x22
     c5c:	9e 8f       	std	Y+30, r25	; 0x1e
     c5e:	8d 8f       	std	Y+29, r24	; 0x1d
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <get_pass+0x11e>
     c68:	9e 8f       	std	Y+30, r25	; 0x1e
     c6a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000); /* Press time  */
		LCD_displayCharacter('*'); /* display the pressed keypad switch */
     c6c:	8a e2       	ldi	r24, 0x2A	; 42
     c6e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_displayCharacter>
		sent_pass[i]=key;
     c72:	8c a5       	ldd	r24, Y+44	; 0x2c
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	88 a9       	ldd	r24, Y+48	; 0x30
     c7a:	99 a9       	ldd	r25, Y+49	; 0x31
     c7c:	fc 01       	movw	r30, r24
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	8d a5       	ldd	r24, Y+45	; 0x2d
     c84:	80 83       	st	Z, r24
	uint8 key, i,j;
	LCD_sendCommand(CLEAR_COMMAND);
	LCD_displayStringRowColumn(0,0,arr);
	LCD_goToRowColumn(1,0);
	/* if any switch pressed for more than 500 ms it counts more than one press */
	for (i=0;i<5;i++){
     c86:	8c a5       	ldd	r24, Y+44	; 0x2c
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	8c a7       	std	Y+44, r24	; 0x2c
     c8c:	8c a5       	ldd	r24, Y+44	; 0x2c
     c8e:	85 30       	cpi	r24, 0x05	; 5
     c90:	08 f4       	brcc	.+2      	; 0xc94 <get_pass+0x14e>
     c92:	77 cf       	rjmp	.-274    	; 0xb82 <get_pass+0x3c>
		key = KeyPad_getPressedKey(); /* get the pressed key number */
		_delay_ms(2000); /* Press time  */
		LCD_displayCharacter('*'); /* display the pressed keypad switch */
		sent_pass[i]=key;
	}
	key = KeyPad_getPressedKey(); /* get the pressed key number */
     c94:	0e 94 75 09 	call	0x12ea	; 0x12ea <KeyPad_getPressedKey>
     c98:	8d a7       	std	Y+45, r24	; 0x2d
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	aa ef       	ldi	r26, 0xFA	; 250
     ca0:	b4 e4       	ldi	r27, 0x44	; 68
     ca2:	89 8f       	std	Y+25, r24	; 0x19
     ca4:	9a 8f       	std	Y+26, r25	; 0x1a
     ca6:	ab 8f       	std	Y+27, r26	; 0x1b
     ca8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     caa:	69 8d       	ldd	r22, Y+25	; 0x19
     cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	53 e4       	ldi	r21, 0x43	; 67
     cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	8d 8b       	std	Y+21, r24	; 0x15
     cc4:	9e 8b       	std	Y+22, r25	; 0x16
     cc6:	af 8b       	std	Y+23, r26	; 0x17
     cc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cde:	88 23       	and	r24, r24
     ce0:	2c f4       	brge	.+10     	; 0xcec <get_pass+0x1a6>
		__ticks = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9c 8b       	std	Y+20, r25	; 0x14
     ce8:	8b 8b       	std	Y+19, r24	; 0x13
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <get_pass+0x224>
	else if (__tmp > 65535)
     cec:	6d 89       	ldd	r22, Y+21	; 0x15
     cee:	7e 89       	ldd	r23, Y+22	; 0x16
     cf0:	8f 89       	ldd	r24, Y+23	; 0x17
     cf2:	98 8d       	ldd	r25, Y+24	; 0x18
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	4f e7       	ldi	r20, 0x7F	; 127
     cfa:	57 e4       	ldi	r21, 0x47	; 71
     cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d00:	18 16       	cp	r1, r24
     d02:	4c f5       	brge	.+82     	; 0xd56 <get_pass+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	69 8d       	ldd	r22, Y+25	; 0x19
     d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e2       	ldi	r20, 0x20	; 32
     d12:	51 e4       	ldi	r21, 0x41	; 65
     d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	9c 8b       	std	Y+20, r25	; 0x14
     d2a:	8b 8b       	std	Y+19, r24	; 0x13
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <get_pass+0x206>
     d2e:	89 e1       	ldi	r24, 0x19	; 25
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9a 8b       	std	Y+18, r25	; 0x12
     d34:	89 8b       	std	Y+17, r24	; 0x11
     d36:	89 89       	ldd	r24, Y+17	; 0x11
     d38:	9a 89       	ldd	r25, Y+18	; 0x12
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <get_pass+0x1f4>
     d3e:	9a 8b       	std	Y+18, r25	; 0x12
     d40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	8b 89       	ldd	r24, Y+19	; 0x13
     d44:	9c 89       	ldd	r25, Y+20	; 0x14
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9c 8b       	std	Y+20, r25	; 0x14
     d4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	8b 89       	ldd	r24, Y+19	; 0x13
     d4e:	9c 89       	ldd	r25, Y+20	; 0x14
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	69 f7       	brne	.-38     	; 0xd2e <get_pass+0x1e8>
     d54:	97 c0       	rjmp	.+302    	; 0xe84 <get_pass+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d56:	6d 89       	ldd	r22, Y+21	; 0x15
     d58:	7e 89       	ldd	r23, Y+22	; 0x16
     d5a:	8f 89       	ldd	r24, Y+23	; 0x17
     d5c:	98 8d       	ldd	r25, Y+24	; 0x18
     d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	98 8b       	std	Y+16, r25	; 0x10
     d70:	8f 87       	std	Y+15, r24	; 0x0f
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	98 89       	ldd	r25, Y+16	; 0x10
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <get_pass+0x230>
     d7a:	98 8b       	std	Y+16, r25	; 0x10
     d7c:	8f 87       	std	Y+15, r24	; 0x0f
     d7e:	82 c0       	rjmp	.+260    	; 0xe84 <get_pass+0x33e>
	_delay_ms(2000); /* Press time  */
	while (key!=13){
		LCD_sendCommand(CLEAR_COMMAND);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
    	LCD_displayStringRowColumn(0,0,"Err, press on/c");
     d86:	20 e6       	ldi	r18, 0x60	; 96
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
    	key = KeyPad_getPressedKey(); /* get the pressed key number */
     d94:	0e 94 75 09 	call	0x12ea	; 0x12ea <KeyPad_getPressedKey>
     d98:	8d a7       	std	Y+45, r24	; 0x2d
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	aa ef       	ldi	r26, 0xFA	; 250
     da0:	b4 e4       	ldi	r27, 0x44	; 68
     da2:	8b 87       	std	Y+11, r24	; 0x0b
     da4:	9c 87       	std	Y+12, r25	; 0x0c
     da6:	ad 87       	std	Y+13, r26	; 0x0d
     da8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dac:	7c 85       	ldd	r23, Y+12	; 0x0c
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a e7       	ldi	r20, 0x7A	; 122
     db8:	53 e4       	ldi	r21, 0x43	; 67
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	8f 83       	std	Y+7, r24	; 0x07
     dc4:	98 87       	std	Y+8, r25	; 0x08
     dc6:	a9 87       	std	Y+9, r26	; 0x09
     dc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dca:	6f 81       	ldd	r22, Y+7	; 0x07
     dcc:	78 85       	ldd	r23, Y+8	; 0x08
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e8       	ldi	r20, 0x80	; 128
     dd8:	5f e3       	ldi	r21, 0x3F	; 63
     dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dde:	88 23       	and	r24, r24
     de0:	2c f4       	brge	.+10     	; 0xdec <get_pass+0x2a6>
		__ticks = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <get_pass+0x324>
	else if (__tmp > 65535)
     dec:	6f 81       	ldd	r22, Y+7	; 0x07
     dee:	78 85       	ldd	r23, Y+8	; 0x08
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	3f ef       	ldi	r19, 0xFF	; 255
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	57 e4       	ldi	r21, 0x47	; 71
     dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e00:	18 16       	cp	r1, r24
     e02:	4c f5       	brge	.+82     	; 0xe56 <get_pass+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e04:	6b 85       	ldd	r22, Y+11	; 0x0b
     e06:	7c 85       	ldd	r23, Y+12	; 0x0c
     e08:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <get_pass+0x306>
     e2e:	89 e1       	ldi	r24, 0x19	; 25
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9c 83       	std	Y+4, r25	; 0x04
     e34:	8b 83       	std	Y+3, r24	; 0x03
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <get_pass+0x2f4>
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	69 f7       	brne	.-38     	; 0xe2e <get_pass+0x2e8>
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <get_pass+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e56:	6f 81       	ldd	r22, Y+7	; 0x07
     e58:	78 85       	ldd	r23, Y+8	; 0x08
     e5a:	89 85       	ldd	r24, Y+9	; 0x09
     e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <get_pass+0x330>
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(2000); /* Press time  */
    	j++;
     e7e:	8b a5       	ldd	r24, Y+43	; 0x2b
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_displayCharacter('*'); /* display the pressed keypad switch */
		sent_pass[i]=key;
	}
	key = KeyPad_getPressedKey(); /* get the pressed key number */
	_delay_ms(2000); /* Press time  */
	while (key!=13){
     e84:	8d a5       	ldd	r24, Y+45	; 0x2d
     e86:	8d 30       	cpi	r24, 0x0D	; 13
     e88:	09 f0       	breq	.+2      	; 0xe8c <get_pass+0x346>
     e8a:	7a cf       	rjmp	.-268    	; 0xd80 <get_pass+0x23a>
    	key = KeyPad_getPressedKey(); /* get the pressed key number */
    	_delay_ms(2000); /* Press time  */
    	j++;

	}
	if (key==13){
     e8c:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8e:	8d 30       	cpi	r24, 0x0D	; 13
     e90:	19 f4       	brne	.+6      	; 0xe98 <get_pass+0x352>
		LCD_sendCommand(CLEAR_COMMAND);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
	}
}
     e98:	e1 96       	adiw	r28, 0x31	; 49
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <compare>:
/*Description
 * This function took two arrays and return if they are matched or not
 * */

uint8 compare(uint8 new_pass[7], uint8 match_pass[7] ){
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <compare+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <compare+0x8>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <compare+0xa>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	9c 83       	std	Y+4, r25	; 0x04
     eba:	8b 83       	std	Y+3, r24	; 0x03
     ebc:	7e 83       	std	Y+6, r23	; 0x06
     ebe:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i,j=0;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	for (i=0;i<5;i++){
     ec2:	1a 82       	std	Y+2, r1	; 0x02
     ec4:	1a c0       	rjmp	.+52     	; 0xefa <compare+0x50>

		if (match_pass[i]==new_pass[i]){
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	fc 01       	movw	r30, r24
     ed2:	e2 0f       	add	r30, r18
     ed4:	f3 1f       	adc	r31, r19
     ed6:	40 81       	ld	r20, Z
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	80 81       	ld	r24, Z
     eea:	48 17       	cp	r20, r24
     eec:	19 f4       	brne	.+6      	; 0xef4 <compare+0x4a>
			j++;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
 * This function took two arrays and return if they are matched or not
 * */

uint8 compare(uint8 new_pass[7], uint8 match_pass[7] ){
	uint8 i,j=0;
	for (i=0;i<5;i++){
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	85 30       	cpi	r24, 0x05	; 5
     efe:	18 f3       	brcs	.-58     	; 0xec6 <compare+0x1c>
			j++;
		}

	}

	if(j==5){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	41 f4       	brne	.+16     	; 0xf16 <compare+0x6c>
		LCD_displayStringRowColumn(0,0,"matched!");
     f06:	20 e7       	ldi	r18, 0x70	; 112
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	a9 01       	movw	r20, r18
     f10:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <compare+0x7a>
	}
	else{
		LCD_displayStringRowColumn(0,0,"Not matched!");
     f16:	29 e7       	ldi	r18, 0x79	; 121
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
	}

	return j;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <F_compare>:
 *[not applicable in real world but for simulation means]
 *else if j=5 store the password in E2PROM in second micro-controller
 *by sending specific key to start the operation whatever it is
 * */

 void F_compare(uint8 new_pass[7], uint8 match_pass[7],char arr[50],enum READY R){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	e4 97       	sbiw	r28, 0x34	; 52
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	9f a7       	std	Y+47, r25	; 0x2f
     f4e:	8e a7       	std	Y+46, r24	; 0x2e
     f50:	79 ab       	std	Y+49, r23	; 0x31
     f52:	68 ab       	std	Y+48, r22	; 0x30
     f54:	5b ab       	std	Y+51, r21	; 0x33
     f56:	4a ab       	std	Y+50, r20	; 0x32
     f58:	2c ab       	std	Y+52, r18	; 0x34
	uint8 i,j=0,z=1;
     f5a:	1c a6       	std	Y+44, r1	; 0x2c
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8b a7       	std	Y+43, r24	; 0x2b
	//get j
	j=compare(new_pass,match_pass);
     f60:	8e a5       	ldd	r24, Y+46	; 0x2e
     f62:	9f a5       	ldd	r25, Y+47	; 0x2f
     f64:	28 a9       	ldd	r18, Y+48	; 0x30
     f66:	39 a9       	ldd	r19, Y+49	; 0x31
     f68:	b9 01       	movw	r22, r18
     f6a:	0e 94 55 07 	call	0xeaa	; 0xeaa <compare>
     f6e:	8c a7       	std	Y+44, r24	; 0x2c
     f70:	90 c1       	rjmp	.+800    	; 0x1292 <F_compare+0x35a>

	while(j!=5){
    	get_pass(arr,match_pass);
     f72:	8a a9       	ldd	r24, Y+50	; 0x32
     f74:	9b a9       	ldd	r25, Y+51	; 0x33
     f76:	28 a9       	ldd	r18, Y+48	; 0x30
     f78:	39 a9       	ldd	r19, Y+49	; 0x31
     f7a:	b9 01       	movw	r22, r18
     f7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
    	j=compare(new_pass,match_pass);
     f80:	8e a5       	ldd	r24, Y+46	; 0x2e
     f82:	9f a5       	ldd	r25, Y+47	; 0x2f
     f84:	28 a9       	ldd	r18, Y+48	; 0x30
     f86:	39 a9       	ldd	r19, Y+49	; 0x31
     f88:	b9 01       	movw	r22, r18
     f8a:	0e 94 55 07 	call	0xeaa	; 0xeaa <compare>
     f8e:	8c a7       	std	Y+44, r24	; 0x2c
    	z++;
     f90:	8b a5       	ldd	r24, Y+43	; 0x2b
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8b a7       	std	Y+43, r24	; 0x2b
    	/*Case of Stranger the system will power off and in this case you have to start the program
    	from the beginning
    	*/

		if(z==3){
     f96:	8b a5       	ldd	r24, Y+43	; 0x2b
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	09 f0       	breq	.+2      	; 0xf9e <F_compare+0x66>
     f9c:	7a c1       	rjmp	.+756    	; 0x1292 <F_compare+0x35a>
			UART_sendByte(READY4);
     f9e:	88 e2       	ldi	r24, 0x28	; 40
     fa0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a8 ec       	ldi	r26, 0xC8	; 200
     faa:	b2 e4       	ldi	r27, 0x42	; 66
     fac:	8f a3       	std	Y+39, r24	; 0x27
     fae:	98 a7       	std	Y+40, r25	; 0x28
     fb0:	a9 a7       	std	Y+41, r26	; 0x29
     fb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6f a1       	ldd	r22, Y+39	; 0x27
     fb6:	78 a5       	ldd	r23, Y+40	; 0x28
     fb8:	89 a5       	ldd	r24, Y+41	; 0x29
     fba:	9a a5       	ldd	r25, Y+42	; 0x2a
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a e7       	ldi	r20, 0x7A	; 122
     fc2:	53 e4       	ldi	r21, 0x43	; 67
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8b a3       	std	Y+35, r24	; 0x23
     fce:	9c a3       	std	Y+36, r25	; 0x24
     fd0:	ad a3       	std	Y+37, r26	; 0x25
     fd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fd4:	6b a1       	ldd	r22, Y+35	; 0x23
     fd6:	7c a1       	ldd	r23, Y+36	; 0x24
     fd8:	8d a1       	ldd	r24, Y+37	; 0x25
     fda:	9e a1       	ldd	r25, Y+38	; 0x26
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <F_compare+0xbe>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9a a3       	std	Y+34, r25	; 0x22
     ff2:	89 a3       	std	Y+33, r24	; 0x21
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <F_compare+0x13c>
	else if (__tmp > 65535)
     ff6:	6b a1       	ldd	r22, Y+35	; 0x23
     ff8:	7c a1       	ldd	r23, Y+36	; 0x24
     ffa:	8d a1       	ldd	r24, Y+37	; 0x25
     ffc:	9e a1       	ldd	r25, Y+38	; 0x26
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <F_compare+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6f a1       	ldd	r22, Y+39	; 0x27
    1010:	78 a5       	ldd	r23, Y+40	; 0x28
    1012:	89 a5       	ldd	r24, Y+41	; 0x29
    1014:	9a a5       	ldd	r25, Y+42	; 0x2a
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9a a3       	std	Y+34, r25	; 0x22
    1034:	89 a3       	std	Y+33, r24	; 0x21
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <F_compare+0x11e>
    1038:	89 e1       	ldi	r24, 0x19	; 25
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	98 a3       	std	Y+32, r25	; 0x20
    103e:	8f 8f       	std	Y+31, r24	; 0x1f
    1040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1042:	98 a1       	ldd	r25, Y+32	; 0x20
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <F_compare+0x10c>
    1048:	98 a3       	std	Y+32, r25	; 0x20
    104a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	89 a1       	ldd	r24, Y+33	; 0x21
    104e:	9a a1       	ldd	r25, Y+34	; 0x22
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9a a3       	std	Y+34, r25	; 0x22
    1054:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	89 a1       	ldd	r24, Y+33	; 0x21
    1058:	9a a1       	ldd	r25, Y+34	; 0x22
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <F_compare+0x100>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <F_compare+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6b a1       	ldd	r22, Y+35	; 0x23
    1062:	7c a1       	ldd	r23, Y+36	; 0x24
    1064:	8d a1       	ldd	r24, Y+37	; 0x25
    1066:	9e a1       	ldd	r25, Y+38	; 0x26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9a a3       	std	Y+34, r25	; 0x22
    1072:	89 a3       	std	Y+33, r24	; 0x21
    1074:	89 a1       	ldd	r24, Y+33	; 0x21
    1076:	9a a1       	ldd	r25, Y+34	; 0x22
    1078:	9e 8f       	std	Y+30, r25	; 0x1e
    107a:	8d 8f       	std	Y+29, r24	; 0x1d
    107c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    107e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <F_compare+0x148>
    1084:	9e 8f       	std	Y+30, r25	; 0x1e
    1086:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			LCD_sendCommand(CLEAR_COMMAND);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"Stranger!");
    108e:	26 e8       	ldi	r18, 0x86	; 134
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
			timer0_init_normal_mode(T0_F_CPU_1024, 0);
    109c:	85 e0       	ldi	r24, 0x05	; 5
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	0e 94 20 14 	call	0x2840	; 0x2840 <timer0_init_normal_mode>
			while (second != 4)
    10a4:	80 91 33 01 	lds	r24, 0x0133
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <F_compare+0x16c>
				;
			second = 0;
    10ac:	10 92 33 01 	sts	0x0133, r1
			LCD_sendCommand(CLEAR_COMMAND);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"Please ReOpen SYS.");
    10b6:	20 e9       	ldi	r18, 0x90	; 144
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e4       	ldi	r25, 0x40	; 64
    10c8:	ac e1       	ldi	r26, 0x1C	; 28
    10ca:	b6 e4       	ldi	r27, 0x46	; 70
    10cc:	89 8f       	std	Y+25, r24	; 0x19
    10ce:	9a 8f       	std	Y+26, r25	; 0x1a
    10d0:	ab 8f       	std	Y+27, r26	; 0x1b
    10d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	69 8d       	ldd	r22, Y+25	; 0x19
    10d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a e7       	ldi	r20, 0x7A	; 122
    10e2:	53 e4       	ldi	r21, 0x43	; 67
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8d 8b       	std	Y+21, r24	; 0x15
    10ee:	9e 8b       	std	Y+22, r25	; 0x16
    10f0:	af 8b       	std	Y+23, r26	; 0x17
    10f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f4:	6d 89       	ldd	r22, Y+21	; 0x15
    10f6:	7e 89       	ldd	r23, Y+22	; 0x16
    10f8:	8f 89       	ldd	r24, Y+23	; 0x17
    10fa:	98 8d       	ldd	r25, Y+24	; 0x18
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1108:	88 23       	and	r24, r24
    110a:	2c f4       	brge	.+10     	; 0x1116 <F_compare+0x1de>
		__ticks = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9c 8b       	std	Y+20, r25	; 0x14
    1112:	8b 8b       	std	Y+19, r24	; 0x13
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <F_compare+0x25c>
	else if (__tmp > 65535)
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	57 e4       	ldi	r21, 0x47	; 71
    1126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112a:	18 16       	cp	r1, r24
    112c:	4c f5       	brge	.+82     	; 0x1180 <F_compare+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112e:	69 8d       	ldd	r22, Y+25	; 0x19
    1130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <F_compare+0x23e>
    1158:	89 e1       	ldi	r24, 0x19	; 25
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9a 8b       	std	Y+18, r25	; 0x12
    115e:	89 8b       	std	Y+17, r24	; 0x11
    1160:	89 89       	ldd	r24, Y+17	; 0x11
    1162:	9a 89       	ldd	r25, Y+18	; 0x12
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <F_compare+0x22c>
    1168:	9a 8b       	std	Y+18, r25	; 0x12
    116a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	8b 89       	ldd	r24, Y+19	; 0x13
    116e:	9c 89       	ldd	r25, Y+20	; 0x14
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	9c 8b       	std	Y+20, r25	; 0x14
    1174:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	8b 89       	ldd	r24, Y+19	; 0x13
    1178:	9c 89       	ldd	r25, Y+20	; 0x14
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	69 f7       	brne	.-38     	; 0x1158 <F_compare+0x220>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <F_compare+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1180:	6d 89       	ldd	r22, Y+21	; 0x15
    1182:	7e 89       	ldd	r23, Y+22	; 0x16
    1184:	8f 89       	ldd	r24, Y+23	; 0x17
    1186:	98 8d       	ldd	r25, Y+24	; 0x18
    1188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	9c 89       	ldd	r25, Y+20	; 0x14
    1198:	98 8b       	std	Y+16, r25	; 0x10
    119a:	8f 87       	std	Y+15, r24	; 0x0f
    119c:	8f 85       	ldd	r24, Y+15	; 0x0f
    119e:	98 89       	ldd	r25, Y+16	; 0x10
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <F_compare+0x268>
    11a4:	98 8b       	std	Y+16, r25	; 0x10
    11a6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10000);
			LCD_sendCommand(CLEAR_COMMAND);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e5       	ldi	r25, 0x50	; 80
    11b2:	a3 ec       	ldi	r26, 0xC3	; 195
    11b4:	b7 e4       	ldi	r27, 0x47	; 71
    11b6:	8b 87       	std	Y+11, r24	; 0x0b
    11b8:	9c 87       	std	Y+12, r25	; 0x0c
    11ba:	ad 87       	std	Y+13, r26	; 0x0d
    11bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a e7       	ldi	r20, 0x7A	; 122
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	a9 87       	std	Y+9, r26	; 0x09
    11dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11de:	6f 81       	ldd	r22, Y+7	; 0x07
    11e0:	78 85       	ldd	r23, Y+8	; 0x08
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <F_compare+0x2c8>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <F_compare+0x346>
	else if (__tmp > 65535)
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <F_compare+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	6b 85       	ldd	r22, Y+11	; 0x0b
    121a:	7c 85       	ldd	r23, Y+12	; 0x0c
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <F_compare+0x328>
    1242:	89 e1       	ldi	r24, 0x19	; 25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <F_compare+0x316>
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <F_compare+0x30a>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <F_compare+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <F_compare+0x352>
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
 void F_compare(uint8 new_pass[7], uint8 match_pass[7],char arr[50],enum READY R){
	uint8 i,j=0,z=1;
	//get j
	j=compare(new_pass,match_pass);

	while(j!=5){
    1292:	8c a5       	ldd	r24, Y+44	; 0x2c
    1294:	85 30       	cpi	r24, 0x05	; 5
    1296:	09 f0       	breq	.+2      	; 0x129a <F_compare+0x362>
    1298:	6c ce       	rjmp	.-808    	; 0xf72 <F_compare+0x3a>
			_delay_ms(100000);
		}

	}
	//sending password to the second MCU TO be stored at E2PROM
	if (j==5) {
    129a:	8c a5       	ldd	r24, Y+44	; 0x2c
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	e1 f4       	brne	.+56     	; 0x12d8 <F_compare+0x3a0>

    	UART_sendByte(R);
    12a0:	8c a9       	ldd	r24, Y+52	; 0x34
    12a2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
    	for(i=0;i<5;i++){
    12a6:	1d a6       	std	Y+45, r1	; 0x2d
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <F_compare+0x39a>
    		while(UART_recieveByte()!=R){};
    12aa:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    12ae:	98 2f       	mov	r25, r24
    12b0:	8c a9       	ldd	r24, Y+52	; 0x34
    12b2:	98 17       	cp	r25, r24
    12b4:	d1 f7       	brne	.-12     	; 0x12aa <F_compare+0x372>
    		UART_sendByte(new_pass[i]);
    12b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    12be:	9f a5       	ldd	r25, Y+47	; 0x2f
    12c0:	fc 01       	movw	r30, r24
    12c2:	e2 0f       	add	r30, r18
    12c4:	f3 1f       	adc	r31, r19
    12c6:	80 81       	ld	r24, Z
    12c8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
	}
	//sending password to the second MCU TO be stored at E2PROM
	if (j==5) {

    	UART_sendByte(R);
    	for(i=0;i<5;i++){
    12cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	8d a7       	std	Y+45, r24	; 0x2d
    12d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    12d4:	85 30       	cpi	r24, 0x05	; 5
    12d6:	48 f3       	brcs	.-46     	; 0x12aa <F_compare+0x372>
    		UART_sendByte(new_pass[i]);

    	}
	}

}
    12d8:	e4 96       	adiw	r28, 0x34	; 52
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <KeyPad_getPressedKey+0x6>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    12f4:	1a 82       	std	Y+2, r1	; 0x02
    12f6:	4c c0       	rjmp	.+152    	; 0x1390 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    12f8:	ea e3       	ldi	r30, 0x3A	; 58
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	80 e1       	ldi	r24, 0x10	; 16
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <KeyPad_getPressedKey+0x22>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	2a 95       	dec	r18
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <KeyPad_getPressedKey+0x1e>
    1310:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <KeyPad_getPressedKey+0x3e>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <KeyPad_getPressedKey+0x3a>
    132c:	80 95       	com	r24
    132e:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	28 c0       	rjmp	.+80     	; 0x1384 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1334:	e9 e3       	ldi	r30, 0x39	; 57
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <KeyPad_getPressedKey+0x62>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <KeyPad_getPressedKey+0x5e>
    1350:	ca 01       	movw	r24, r20
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	91 f4       	brne	.+36     	; 0x137e <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	98 2f       	mov	r25, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	89 0f       	add	r24, r25
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	0e 94 cd 09 	call	0x139a	; 0x139a <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	a8 f2       	brcs	.-86     	; 0x1334 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	08 f4       	brcc	.+2      	; 0x1398 <KeyPad_getPressedKey+0xae>
    1396:	b0 cf       	rjmp	.-160    	; 0x12f8 <KeyPad_getPressedKey+0xe>
    1398:	ad cf       	rjmp	.-166    	; 0x12f4 <KeyPad_getPressedKey+0xa>

0000139a <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <KeyPad_4x4_adjustKeyNumber+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <KeyPad_4x4_adjustKeyNumber+0x8>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3c 83       	std	Y+4, r19	; 0x04
    13b0:	2b 83       	std	Y+3, r18	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	91 05       	cpc	r25, r1
    13ba:	09 f4       	brne	.+2      	; 0x13be <KeyPad_4x4_adjustKeyNumber+0x24>
    13bc:	70 c0       	rjmp	.+224    	; 0x149e <KeyPad_4x4_adjustKeyNumber+0x104>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	29 30       	cpi	r18, 0x09	; 9
    13c4:	31 05       	cpc	r19, r1
    13c6:	5c f5       	brge	.+86     	; 0x141e <KeyPad_4x4_adjustKeyNumber+0x84>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <KeyPad_4x4_adjustKeyNumber+0x3a>
    13d2:	59 c0       	rjmp	.+178    	; 0x1486 <KeyPad_4x4_adjustKeyNumber+0xec>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	25 30       	cpi	r18, 0x05	; 5
    13da:	31 05       	cpc	r19, r1
    13dc:	9c f4       	brge	.+38     	; 0x1404 <KeyPad_4x4_adjustKeyNumber+0x6a>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <KeyPad_4x4_adjustKeyNumber+0x50>
    13e8:	48 c0       	rjmp	.+144    	; 0x147a <KeyPad_4x4_adjustKeyNumber+0xe0>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	23 30       	cpi	r18, 0x03	; 3
    13f0:	31 05       	cpc	r19, r1
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <KeyPad_4x4_adjustKeyNumber+0x5c>
    13f4:	45 c0       	rjmp	.+138    	; 0x1480 <KeyPad_4x4_adjustKeyNumber+0xe6>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <KeyPad_4x4_adjustKeyNumber+0x68>
    1400:	39 c0       	rjmp	.+114    	; 0x1474 <KeyPad_4x4_adjustKeyNumber+0xda>
    1402:	67 c0       	rjmp	.+206    	; 0x14d2 <KeyPad_4x4_adjustKeyNumber+0x138>
    1404:	2b 81       	ldd	r18, Y+3	; 0x03
    1406:	3c 81       	ldd	r19, Y+4	; 0x04
    1408:	26 30       	cpi	r18, 0x06	; 6
    140a:	31 05       	cpc	r19, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <KeyPad_4x4_adjustKeyNumber+0x76>
    140e:	41 c0       	rjmp	.+130    	; 0x1492 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	87 30       	cpi	r24, 0x07	; 7
    1416:	91 05       	cpc	r25, r1
    1418:	0c f0       	brlt	.+2      	; 0x141c <KeyPad_4x4_adjustKeyNumber+0x82>
    141a:	3e c0       	rjmp	.+124    	; 0x1498 <KeyPad_4x4_adjustKeyNumber+0xfe>
    141c:	37 c0       	rjmp	.+110    	; 0x148c <KeyPad_4x4_adjustKeyNumber+0xf2>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	2c 30       	cpi	r18, 0x0C	; 12
    1424:	31 05       	cpc	r19, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <KeyPad_4x4_adjustKeyNumber+0x90>
    1428:	46 c0       	rjmp	.+140    	; 0x14b6 <KeyPad_4x4_adjustKeyNumber+0x11c>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	8d 30       	cpi	r24, 0x0D	; 13
    1430:	91 05       	cpc	r25, r1
    1432:	5c f4       	brge	.+22     	; 0x144a <KeyPad_4x4_adjustKeyNumber+0xb0>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	2a 30       	cpi	r18, 0x0A	; 10
    143a:	31 05       	cpc	r19, r1
    143c:	b1 f1       	breq	.+108    	; 0x14aa <KeyPad_4x4_adjustKeyNumber+0x110>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	8b 30       	cpi	r24, 0x0B	; 11
    1444:	91 05       	cpc	r25, r1
    1446:	a4 f5       	brge	.+104    	; 0x14b0 <KeyPad_4x4_adjustKeyNumber+0x116>
    1448:	2d c0       	rjmp	.+90     	; 0x14a4 <KeyPad_4x4_adjustKeyNumber+0x10a>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	2e 30       	cpi	r18, 0x0E	; 14
    1450:	31 05       	cpc	r19, r1
    1452:	b9 f1       	breq	.+110    	; 0x14c2 <KeyPad_4x4_adjustKeyNumber+0x128>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	8e 30       	cpi	r24, 0x0E	; 14
    145a:	91 05       	cpc	r25, r1
    145c:	7c f1       	brlt	.+94     	; 0x14bc <KeyPad_4x4_adjustKeyNumber+0x122>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	2f 30       	cpi	r18, 0x0F	; 15
    1464:	31 05       	cpc	r19, r1
    1466:	79 f1       	breq	.+94     	; 0x14c6 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	80 31       	cpi	r24, 0x10	; 16
    146e:	91 05       	cpc	r25, r1
    1470:	69 f1       	breq	.+90     	; 0x14cc <KeyPad_4x4_adjustKeyNumber+0x132>
    1472:	2f c0       	rjmp	.+94     	; 0x14d2 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1474:	97 e0       	ldi	r25, 0x07	; 7
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	2e c0       	rjmp	.+92     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    147a:	28 e0       	ldi	r18, 0x08	; 8
    147c:	2a 83       	std	Y+2, r18	; 0x02
    147e:	2b c0       	rjmp	.+86     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1480:	39 e0       	ldi	r19, 0x09	; 9
    1482:	3a 83       	std	Y+2, r19	; 0x02
    1484:	28 c0       	rjmp	.+80     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1486:	85 e2       	ldi	r24, 0x25	; 37
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	25 c0       	rjmp	.+74     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    148c:	94 e0       	ldi	r25, 0x04	; 4
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	22 c0       	rjmp	.+68     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1492:	25 e0       	ldi	r18, 0x05	; 5
    1494:	2a 83       	std	Y+2, r18	; 0x02
    1496:	1f c0       	rjmp	.+62     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1498:	36 e0       	ldi	r19, 0x06	; 6
    149a:	3a 83       	std	Y+2, r19	; 0x02
    149c:	1c c0       	rjmp	.+56     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    149e:	8a e2       	ldi	r24, 0x2A	; 42
    14a0:	8a 83       	std	Y+2, r24	; 0x02
    14a2:	19 c0       	rjmp	.+50     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	16 c0       	rjmp	.+44     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    14aa:	22 e0       	ldi	r18, 0x02	; 2
    14ac:	2a 83       	std	Y+2, r18	; 0x02
    14ae:	13 c0       	rjmp	.+38     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    14b0:	33 e0       	ldi	r19, 0x03	; 3
    14b2:	3a 83       	std	Y+2, r19	; 0x02
    14b4:	10 c0       	rjmp	.+32     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    14b6:	8d e2       	ldi	r24, 0x2D	; 45
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	0d c0       	rjmp	.+26     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    14bc:	9d e0       	ldi	r25, 0x0D	; 13
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	0a c0       	rjmp	.+20     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    14c2:	1a 82       	std	Y+2, r1	; 0x02
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    14c6:	2d e3       	ldi	r18, 0x3D	; 61
    14c8:	2a 83       	std	Y+2, r18	; 0x02
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    14cc:	3b e2       	ldi	r19, 0x2B	; 43
    14ce:	3a 83       	std	Y+2, r19	; 0x02
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    14ee:	a4 e3       	ldi	r26, 0x34	; 52
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e4 e3       	ldi	r30, 0x34	; 52
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 6e       	ori	r24, 0xE0	; 224
    14fa:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    14fc:	e7 e3       	ldi	r30, 0x37	; 55
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1504:	88 e3       	ldi	r24, 0x38	; 56
    1506:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    150a:	8c e0       	ldi	r24, 0x0C	; 12
    150c:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
}
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	e9 97       	sbiw	r28, 0x39	; 57
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1532:	a5 e3       	ldi	r26, 0x35	; 53
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e5 e3       	ldi	r30, 0x35	; 53
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 7d       	andi	r24, 0xDF	; 223
    153e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1540:	a5 e3       	ldi	r26, 0x35	; 53
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e3       	ldi	r30, 0x35	; 53
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8f 7b       	andi	r24, 0xBF	; 191
    154c:	8c 93       	st	X, r24
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e8       	ldi	r26, 0x80	; 128
    1554:	bf e3       	ldi	r27, 0x3F	; 63
    1556:	8d ab       	std	Y+53, r24	; 0x35
    1558:	9e ab       	std	Y+54, r25	; 0x36
    155a:	af ab       	std	Y+55, r26	; 0x37
    155c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	6d a9       	ldd	r22, Y+53	; 0x35
    1560:	7e a9       	ldd	r23, Y+54	; 0x36
    1562:	8f a9       	ldd	r24, Y+55	; 0x37
    1564:	98 ad       	ldd	r25, Y+56	; 0x38
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a e7       	ldi	r20, 0x7A	; 122
    156c:	53 e4       	ldi	r21, 0x43	; 67
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	89 ab       	std	Y+49, r24	; 0x31
    1578:	9a ab       	std	Y+50, r25	; 0x32
    157a:	ab ab       	std	Y+51, r26	; 0x33
    157c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    157e:	69 a9       	ldd	r22, Y+49	; 0x31
    1580:	7a a9       	ldd	r23, Y+50	; 0x32
    1582:	8b a9       	ldd	r24, Y+51	; 0x33
    1584:	9c a9       	ldd	r25, Y+52	; 0x34
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <LCD_sendCommand+0x84>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	98 ab       	std	Y+48, r25	; 0x30
    159c:	8f a7       	std	Y+47, r24	; 0x2f
    159e:	3f c0       	rjmp	.+126    	; 0x161e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    15a0:	69 a9       	ldd	r22, Y+49	; 0x31
    15a2:	7a a9       	ldd	r23, Y+50	; 0x32
    15a4:	8b a9       	ldd	r24, Y+51	; 0x33
    15a6:	9c a9       	ldd	r25, Y+52	; 0x34
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	4c f5       	brge	.+82     	; 0x160a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	6d a9       	ldd	r22, Y+53	; 0x35
    15ba:	7e a9       	ldd	r23, Y+54	; 0x36
    15bc:	8f a9       	ldd	r24, Y+55	; 0x37
    15be:	98 ad       	ldd	r25, Y+56	; 0x38
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	98 ab       	std	Y+48, r25	; 0x30
    15de:	8f a7       	std	Y+47, r24	; 0x2f
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <LCD_sendCommand+0xe4>
    15e2:	89 e1       	ldi	r24, 0x19	; 25
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9e a7       	std	Y+46, r25	; 0x2e
    15e8:	8d a7       	std	Y+45, r24	; 0x2d
    15ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_sendCommand+0xd2>
    15f2:	9e a7       	std	Y+46, r25	; 0x2e
    15f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f8:	98 a9       	ldd	r25, Y+48	; 0x30
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	98 ab       	std	Y+48, r25	; 0x30
    15fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	8f a5       	ldd	r24, Y+47	; 0x2f
    1602:	98 a9       	ldd	r25, Y+48	; 0x30
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f7       	brne	.-38     	; 0x15e2 <LCD_sendCommand+0xc6>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160a:	69 a9       	ldd	r22, Y+49	; 0x31
    160c:	7a a9       	ldd	r23, Y+50	; 0x32
    160e:	8b a9       	ldd	r24, Y+51	; 0x33
    1610:	9c a9       	ldd	r25, Y+52	; 0x34
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	98 ab       	std	Y+48, r25	; 0x30
    161c:	8f a7       	std	Y+47, r24	; 0x2f
    161e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1620:	98 a9       	ldd	r25, Y+48	; 0x30
    1622:	9c a7       	std	Y+44, r25	; 0x2c
    1624:	8b a7       	std	Y+43, r24	; 0x2b
    1626:	8b a5       	ldd	r24, Y+43	; 0x2b
    1628:	9c a5       	ldd	r25, Y+44	; 0x2c
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCD_sendCommand+0x10e>
    162e:	9c a7       	std	Y+44, r25	; 0x2c
    1630:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 68       	ori	r24, 0x80	; 128
    163e:	8c 93       	st	X, r24
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e8       	ldi	r26, 0x80	; 128
    1646:	bf e3       	ldi	r27, 0x3F	; 63
    1648:	8f a3       	std	Y+39, r24	; 0x27
    164a:	98 a7       	std	Y+40, r25	; 0x28
    164c:	a9 a7       	std	Y+41, r26	; 0x29
    164e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	6f a1       	ldd	r22, Y+39	; 0x27
    1652:	78 a5       	ldd	r23, Y+40	; 0x28
    1654:	89 a5       	ldd	r24, Y+41	; 0x29
    1656:	9a a5       	ldd	r25, Y+42	; 0x2a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	53 e4       	ldi	r21, 0x43	; 67
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8b a3       	std	Y+35, r24	; 0x23
    166a:	9c a3       	std	Y+36, r25	; 0x24
    166c:	ad a3       	std	Y+37, r26	; 0x25
    166e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1670:	6b a1       	ldd	r22, Y+35	; 0x23
    1672:	7c a1       	ldd	r23, Y+36	; 0x24
    1674:	8d a1       	ldd	r24, Y+37	; 0x25
    1676:	9e a1       	ldd	r25, Y+38	; 0x26
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <LCD_sendCommand+0x176>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9a a3       	std	Y+34, r25	; 0x22
    168e:	89 a3       	std	Y+33, r24	; 0x21
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1692:	6b a1       	ldd	r22, Y+35	; 0x23
    1694:	7c a1       	ldd	r23, Y+36	; 0x24
    1696:	8d a1       	ldd	r24, Y+37	; 0x25
    1698:	9e a1       	ldd	r25, Y+38	; 0x26
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	6f a1       	ldd	r22, Y+39	; 0x27
    16ac:	78 a5       	ldd	r23, Y+40	; 0x28
    16ae:	89 a5       	ldd	r24, Y+41	; 0x29
    16b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <LCD_sendCommand+0x1d6>
    16d4:	89 e1       	ldi	r24, 0x19	; 25
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	98 a3       	std	Y+32, r25	; 0x20
    16da:	8f 8f       	std	Y+31, r24	; 0x1f
    16dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16de:	98 a1       	ldd	r25, Y+32	; 0x20
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_sendCommand+0x1c4>
    16e4:	98 a3       	std	Y+32, r25	; 0x20
    16e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ea:	9a a1       	ldd	r25, Y+34	; 0x22
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9a a3       	std	Y+34, r25	; 0x22
    16f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	89 a1       	ldd	r24, Y+33	; 0x21
    16f4:	9a a1       	ldd	r25, Y+34	; 0x22
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <LCD_sendCommand+0x1b8>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6b a1       	ldd	r22, Y+35	; 0x23
    16fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1700:	8d a1       	ldd	r24, Y+37	; 0x25
    1702:	9e a1       	ldd	r25, Y+38	; 0x26
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	89 a1       	ldd	r24, Y+33	; 0x21
    1712:	9a a1       	ldd	r25, Y+34	; 0x22
    1714:	9e 8f       	std	Y+30, r25	; 0x1e
    1716:	8d 8f       	std	Y+29, r24	; 0x1d
    1718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    171a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_sendCommand+0x200>
    1720:	9e 8f       	std	Y+30, r25	; 0x1e
    1722:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	89 ad       	ldd	r24, Y+57	; 0x39
    172a:	80 83       	st	Z, r24
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e8       	ldi	r26, 0x80	; 128
    1732:	bf e3       	ldi	r27, 0x3F	; 63
    1734:	89 8f       	std	Y+25, r24	; 0x19
    1736:	9a 8f       	std	Y+26, r25	; 0x1a
    1738:	ab 8f       	std	Y+27, r26	; 0x1b
    173a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	69 8d       	ldd	r22, Y+25	; 0x19
    173e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	53 e4       	ldi	r21, 0x43	; 67
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8d 8b       	std	Y+21, r24	; 0x15
    1756:	9e 8b       	std	Y+22, r25	; 0x16
    1758:	af 8b       	std	Y+23, r26	; 0x17
    175a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    175c:	6d 89       	ldd	r22, Y+21	; 0x15
    175e:	7e 89       	ldd	r23, Y+22	; 0x16
    1760:	8f 89       	ldd	r24, Y+23	; 0x17
    1762:	98 8d       	ldd	r25, Y+24	; 0x18
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_sendCommand+0x262>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 8b       	std	Y+20, r25	; 0x14
    177a:	8b 8b       	std	Y+19, r24	; 0x13
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    177e:	6d 89       	ldd	r22, Y+21	; 0x15
    1780:	7e 89       	ldd	r23, Y+22	; 0x16
    1782:	8f 89       	ldd	r24, Y+23	; 0x17
    1784:	98 8d       	ldd	r25, Y+24	; 0x18
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	69 8d       	ldd	r22, Y+25	; 0x19
    1798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    179a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    179c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9c 8b       	std	Y+20, r25	; 0x14
    17bc:	8b 8b       	std	Y+19, r24	; 0x13
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_sendCommand+0x2c2>
    17c0:	89 e1       	ldi	r24, 0x19	; 25
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9a 8b       	std	Y+18, r25	; 0x12
    17c6:	89 8b       	std	Y+17, r24	; 0x11
    17c8:	89 89       	ldd	r24, Y+17	; 0x11
    17ca:	9a 89       	ldd	r25, Y+18	; 0x12
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_sendCommand+0x2b0>
    17d0:	9a 8b       	std	Y+18, r25	; 0x12
    17d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	9c 89       	ldd	r25, Y+20	; 0x14
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8b 89       	ldd	r24, Y+19	; 0x13
    17e0:	9c 89       	ldd	r25, Y+20	; 0x14
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_sendCommand+0x2a4>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ea:	7e 89       	ldd	r23, Y+22	; 0x16
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	98 8d       	ldd	r25, Y+24	; 0x18
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
    17fc:	8b 89       	ldd	r24, Y+19	; 0x13
    17fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1800:	98 8b       	std	Y+16, r25	; 0x10
    1802:	8f 87       	std	Y+15, r24	; 0x0f
    1804:	8f 85       	ldd	r24, Y+15	; 0x0f
    1806:	98 89       	ldd	r25, Y+16	; 0x10
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_sendCommand+0x2ec>
    180c:	98 8b       	std	Y+16, r25	; 0x10
    180e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1810:	a5 e3       	ldi	r26, 0x35	; 53
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e3       	ldi	r30, 0x35	; 53
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	8c 93       	st	X, r24
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	bf e3       	ldi	r27, 0x3F	; 63
    1826:	8b 87       	std	Y+11, r24	; 0x0b
    1828:	9c 87       	std	Y+12, r25	; 0x0c
    182a:	ad 87       	std	Y+13, r26	; 0x0d
    182c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a e7       	ldi	r20, 0x7A	; 122
    183c:	53 e4       	ldi	r21, 0x43	; 67
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8f 83       	std	Y+7, r24	; 0x07
    1848:	98 87       	std	Y+8, r25	; 0x08
    184a:	a9 87       	std	Y+9, r26	; 0x09
    184c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <LCD_sendCommand+0x354>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <LCD_sendCommand+0x3b4>
    18b2:	89 e1       	ldi	r24, 0x19	; 25
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_sendCommand+0x3a2>
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <LCD_sendCommand+0x396>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6f 81       	ldd	r22, Y+7	; 0x07
    18dc:	78 85       	ldd	r23, Y+8	; 0x08
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_sendCommand+0x3de>
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1902:	e9 96       	adiw	r28, 0x39	; 57
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	e9 97       	sbiw	r28, 0x39	; 57
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1938:	a5 e3       	ldi	r26, 0x35	; 53
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e5 e3       	ldi	r30, 0x35	; 53
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8f 7b       	andi	r24, 0xBF	; 191
    1944:	8c 93       	st	X, r24
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e8       	ldi	r26, 0x80	; 128
    194c:	bf e3       	ldi	r27, 0x3F	; 63
    194e:	8d ab       	std	Y+53, r24	; 0x35
    1950:	9e ab       	std	Y+54, r25	; 0x36
    1952:	af ab       	std	Y+55, r26	; 0x37
    1954:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6d a9       	ldd	r22, Y+53	; 0x35
    1958:	7e a9       	ldd	r23, Y+54	; 0x36
    195a:	8f a9       	ldd	r24, Y+55	; 0x37
    195c:	98 ad       	ldd	r25, Y+56	; 0x38
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	89 ab       	std	Y+49, r24	; 0x31
    1970:	9a ab       	std	Y+50, r25	; 0x32
    1972:	ab ab       	std	Y+51, r26	; 0x33
    1974:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1976:	69 a9       	ldd	r22, Y+49	; 0x31
    1978:	7a a9       	ldd	r23, Y+50	; 0x32
    197a:	8b a9       	ldd	r24, Y+51	; 0x33
    197c:	9c a9       	ldd	r25, Y+52	; 0x34
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_displayCharacter+0x84>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	98 ab       	std	Y+48, r25	; 0x30
    1994:	8f a7       	std	Y+47, r24	; 0x2f
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1998:	69 a9       	ldd	r22, Y+49	; 0x31
    199a:	7a a9       	ldd	r23, Y+50	; 0x32
    199c:	8b a9       	ldd	r24, Y+51	; 0x33
    199e:	9c a9       	ldd	r25, Y+52	; 0x34
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6d a9       	ldd	r22, Y+53	; 0x35
    19b2:	7e a9       	ldd	r23, Y+54	; 0x36
    19b4:	8f a9       	ldd	r24, Y+55	; 0x37
    19b6:	98 ad       	ldd	r25, Y+56	; 0x38
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	98 ab       	std	Y+48, r25	; 0x30
    19d6:	8f a7       	std	Y+47, r24	; 0x2f
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <LCD_displayCharacter+0xe4>
    19da:	89 e1       	ldi	r24, 0x19	; 25
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9e a7       	std	Y+46, r25	; 0x2e
    19e0:	8d a7       	std	Y+45, r24	; 0x2d
    19e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_displayCharacter+0xd2>
    19ea:	9e a7       	std	Y+46, r25	; 0x2e
    19ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f0:	98 a9       	ldd	r25, Y+48	; 0x30
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	98 ab       	std	Y+48, r25	; 0x30
    19f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fa:	98 a9       	ldd	r25, Y+48	; 0x30
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <LCD_displayCharacter+0xc6>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	69 a9       	ldd	r22, Y+49	; 0x31
    1a04:	7a a9       	ldd	r23, Y+50	; 0x32
    1a06:	8b a9       	ldd	r24, Y+51	; 0x33
    1a08:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	98 ab       	std	Y+48, r25	; 0x30
    1a14:	8f a7       	std	Y+47, r24	; 0x2f
    1a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a18:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1a:	9c a7       	std	Y+44, r25	; 0x2c
    1a1c:	8b a7       	std	Y+43, r24	; 0x2b
    1a1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_displayCharacter+0x10e>
    1a26:	9c a7       	std	Y+44, r25	; 0x2c
    1a28:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a2a:	a5 e3       	ldi	r26, 0x35	; 53
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e3       	ldi	r30, 0x35	; 53
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 68       	ori	r24, 0x80	; 128
    1a36:	8c 93       	st	X, r24
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e8       	ldi	r26, 0x80	; 128
    1a3e:	bf e3       	ldi	r27, 0x3F	; 63
    1a40:	8f a3       	std	Y+39, r24	; 0x27
    1a42:	98 a7       	std	Y+40, r25	; 0x28
    1a44:	a9 a7       	std	Y+41, r26	; 0x29
    1a46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	6f a1       	ldd	r22, Y+39	; 0x27
    1a4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8b a3       	std	Y+35, r24	; 0x23
    1a62:	9c a3       	std	Y+36, r25	; 0x24
    1a64:	ad a3       	std	Y+37, r26	; 0x25
    1a66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a68:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <LCD_displayCharacter+0x176>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9a a3       	std	Y+34, r25	; 0x22
    1a86:	89 a3       	std	Y+33, r24	; 0x21
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a90:	9e a1       	ldd	r25, Y+38	; 0x26
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa4:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa6:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9a a3       	std	Y+34, r25	; 0x22
    1ac8:	89 a3       	std	Y+33, r24	; 0x21
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <LCD_displayCharacter+0x1d6>
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	98 a3       	std	Y+32, r25	; 0x20
    1ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ad6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_displayCharacter+0x1c4>
    1adc:	98 a3       	std	Y+32, r25	; 0x20
    1ade:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9a a3       	std	Y+34, r25	; 0x22
    1ae8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	89 a1       	ldd	r24, Y+33	; 0x21
    1aec:	9a a1       	ldd	r25, Y+34	; 0x22
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <LCD_displayCharacter+0x1b8>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6b a1       	ldd	r22, Y+35	; 0x23
    1af6:	7c a1       	ldd	r23, Y+36	; 0x24
    1af8:	8d a1       	ldd	r24, Y+37	; 0x25
    1afa:	9e a1       	ldd	r25, Y+38	; 0x26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	89 a1       	ldd	r24, Y+33	; 0x21
    1b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_displayCharacter+0x200>
    1b18:	9e 8f       	std	Y+30, r25	; 0x1e
    1b1a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	89 ad       	ldd	r24, Y+57	; 0x39
    1b22:	80 83       	st	Z, r24
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e8       	ldi	r26, 0x80	; 128
    1b2a:	bf e3       	ldi	r27, 0x3F	; 63
    1b2c:	89 8f       	std	Y+25, r24	; 0x19
    1b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b30:	ab 8f       	std	Y+27, r26	; 0x1b
    1b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	69 8d       	ldd	r22, Y+25	; 0x19
    1b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	53 e4       	ldi	r21, 0x43	; 67
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8d 8b       	std	Y+21, r24	; 0x15
    1b4e:	9e 8b       	std	Y+22, r25	; 0x16
    1b50:	af 8b       	std	Y+23, r26	; 0x17
    1b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b54:	6d 89       	ldd	r22, Y+21	; 0x15
    1b56:	7e 89       	ldd	r23, Y+22	; 0x16
    1b58:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_displayCharacter+0x2c2>
    1bb8:	89 e1       	ldi	r24, 0x19	; 25
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9a 8b       	std	Y+18, r25	; 0x12
    1bbe:	89 8b       	std	Y+17, r24	; 0x11
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayCharacter+0x2b0>
    1bc8:	9a 8b       	std	Y+18, r25	; 0x12
    1bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_displayCharacter+0x2a4>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf8:	98 8b       	std	Y+16, r25	; 0x10
    1bfa:	8f 87       	std	Y+15, r24	; 0x0f
    1bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfe:	98 89       	ldd	r25, Y+16	; 0x10
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_displayCharacter+0x2ec>
    1c04:	98 8b       	std	Y+16, r25	; 0x10
    1c06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8f 77       	andi	r24, 0x7F	; 127
    1c14:	8c 93       	st	X, r24
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e8       	ldi	r26, 0x80	; 128
    1c1c:	bf e3       	ldi	r27, 0x3F	; 63
    1c1e:	8b 87       	std	Y+11, r24	; 0x0b
    1c20:	9c 87       	std	Y+12, r25	; 0x0c
    1c22:	ad 87       	std	Y+13, r26	; 0x0d
    1c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a e7       	ldi	r20, 0x7A	; 122
    1c34:	53 e4       	ldi	r21, 0x43	; 67
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8f 83       	std	Y+7, r24	; 0x07
    1c40:	98 87       	std	Y+8, r25	; 0x08
    1c42:	a9 87       	std	Y+9, r26	; 0x09
    1c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	4c f5       	brge	.+82     	; 0x1cd2 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <LCD_displayCharacter+0x3b4>
    1caa:	89 e1       	ldi	r24, 0x19	; 25
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_displayCharacter+0x3a2>
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f7       	brne	.-38     	; 0x1caa <LCD_displayCharacter+0x396>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_displayCharacter+0x3de>
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cfa:	e9 96       	adiw	r28, 0x39	; 57
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <LCD_displayString+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_displayCharacter>
		i++;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	39 f7       	brne	.-50     	; 0x1d20 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <LCD_goToRowColumn+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <LCD_goToRowColumn+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3d 83       	std	Y+5, r19	; 0x05
    1d78:	2c 83       	std	Y+4, r18	; 0x04
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	c1 f0       	breq	.+48     	; 0x1db4 <LCD_goToRowColumn+0x56>
    1d84:	2c 81       	ldd	r18, Y+4	; 0x04
    1d86:	3d 81       	ldd	r19, Y+5	; 0x05
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_goToRowColumn+0x3a>
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <LCD_goToRowColumn+0x50>
    1d96:	19 c0       	rjmp	.+50     	; 0x1dca <LCD_goToRowColumn+0x6c>
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	69 f0       	breq	.+26     	; 0x1dbc <LCD_goToRowColumn+0x5e>
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <LCD_goToRowColumn+0x66>
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	0b c0       	rjmp	.+22     	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	80 5c       	subi	r24, 0xC0	; 192
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	80 5f       	subi	r24, 0xF0	; 240
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 5b       	subi	r24, 0xB0	; 176
    1dc8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	80 68       	ori	r24, 0x80	; 128
    1dce:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LCD_displayStringRowColumn+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <LCD_displayStringRowColumn+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02
    1df2:	5c 83       	std	Y+4, r21	; 0x04
    1df4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dfa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	62 97       	sbiw	r28, 0x12	; 18
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e30:	9e 01       	movw	r18, r28
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	b9 01       	movw	r22, r18
    1e38:	4a e0       	ldi	r20, 0x0A	; 10
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <itoa>
   LCD_displayString(buff);
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
}
    1e48:	62 96       	adiw	r28, 0x12	; 18
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <__vector_9>:
 * so put initial timer counter=0  0 --> 255 (32ms per overflow)
 * so we need timer to overflow 31 times to get a 1 second
 * This is the ISR of timer0 overflow mode
 */
ISR(TIMER0_OVF_vect)
{
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	8f 93       	push	r24
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1e82:	80 91 32 01 	lds	r24, 0x0132
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	80 93 32 01 	sts	0x0132, r24
	if (g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    1e8c:	80 91 32 01 	lds	r24, 0x0132
    1e90:	80 32       	cpi	r24, 0x20	; 32
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <__vector_9+0x34>
	{
		second++;
    1e94:	80 91 33 01 	lds	r24, 0x0133
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 33 01 	sts	0x0133, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    1e9e:	10 92 32 01 	sts	0x0132, r1
	}
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	8f 91       	pop	r24
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <main>:


//START OF MAIN FUNCTION

int main(void)
{
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	c0 58       	subi	r28, 0x80	; 128
    1ec0:	d0 40       	sbci	r29, 0x00	; 0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61

	uint8 i,key
	,new_pass[7],match_pass[7],old_pass[7],match_pass2[7];

	//init lcd
	LCD_init();
    1ecc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_init>

	//init uart
	UART_init();
    1ed0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <UART_init>
	/* These statements out of main as I got first password for new user just one time
	 * I don't have to to make second MCU check for any stranger in this phase
	 * as my user is new one with no reserved data in E2PROM
	 */

	get_pass("Enter your PW:", new_pass);
    1ed4:	83 ea       	ldi	r24, 0xA3	; 163
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e 01       	movw	r18, r28
    1eda:	2b 59       	subi	r18, 0x9B	; 155
    1edc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ede:	b9 01       	movw	r22, r18
    1ee0:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e1 5a       	subi	r30, 0xA1	; 161
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e2       	ldi	r26, 0x20	; 32
    1ef0:	b1 e4       	ldi	r27, 0x41	; 65
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	8e 01       	movw	r16, r28
    1efc:	05 5a       	subi	r16, 0xA5	; 165
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	fe 01       	movw	r30, r28
    1f02:	e1 5a       	subi	r30, 0xA1	; 161
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	53 e4       	ldi	r21, 0x43	; 67
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	80 83       	st	Z, r24
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	a2 83       	std	Z+2, r26	; 0x02
    1f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e5 5a       	subi	r30, 0xA5	; 165
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	44 f4       	brge	.+16     	; 0x1f56 <main+0xa4>
		__ticks = 1;
    1f46:	fe 01       	movw	r30, r28
    1f48:	e7 5a       	subi	r30, 0xA7	; 167
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	64 c0       	rjmp	.+200    	; 0x201e <main+0x16c>
	else if (__tmp > 65535)
    1f56:	fe 01       	movw	r30, r28
    1f58:	e5 5a       	subi	r30, 0xA5	; 165
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	0c f0       	brlt	.+2      	; 0x1f76 <main+0xc4>
    1f74:	43 c0       	rjmp	.+134    	; 0x1ffc <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f76:	fe 01       	movw	r30, r28
    1f78:	e1 5a       	subi	r30, 0xA1	; 161
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8e 01       	movw	r16, r28
    1f96:	07 5a       	subi	r16, 0xA7	; 167
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	1f c0       	rjmp	.+62     	; 0x1fec <main+0x13a>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 5a       	subi	r30, 0xA9	; 169
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	89 e1       	ldi	r24, 0x19	; 25
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e9 5a       	subi	r30, 0xA9	; 169
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <main+0x114>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e9 5a       	subi	r30, 0xA9	; 169
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	de 01       	movw	r26, r28
    1fd6:	a7 5a       	subi	r26, 0xA7	; 167
    1fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5a       	subi	r30, 0xA7	; 167
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	11 96       	adiw	r26, 0x01	; 1
    1fe8:	9c 93       	st	X, r25
    1fea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5a       	subi	r30, 0xA7	; 167
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	d1 f6       	brne	.-76     	; 0x1fae <main+0xfc>
    1ffa:	27 c0       	rjmp	.+78     	; 0x204a <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	07 5a       	subi	r16, 0xA7	; 167
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e5 5a       	subi	r30, 0xA5	; 165
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	de 01       	movw	r26, r28
    2020:	ab 5a       	subi	r26, 0xAB	; 171
    2022:	bf 4f       	sbci	r27, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	e7 5a       	subi	r30, 0xA7	; 167
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	8d 93       	st	X+, r24
    2030:	9c 93       	st	X, r25
    2032:	fe 01       	movw	r30, r28
    2034:	eb 5a       	subi	r30, 0xAB	; 171
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0x18a>
    2040:	fe 01       	movw	r30, r28
    2042:	eb 5a       	subi	r30, 0xAB	; 171
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
	_delay_ms(10);
	get_pass("reEnter your PW:",match_pass);
    204a:	82 eb       	ldi	r24, 0xB2	; 178
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9e 01       	movw	r18, r28
    2050:	24 59       	subi	r18, 0x94	; 148
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	b9 01       	movw	r22, r18
    2056:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
	F_compare(new_pass,match_pass,"reEnter your PW:",READY1);
    205a:	ce 01       	movw	r24, r28
    205c:	8b 59       	subi	r24, 0x9B	; 155
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	9e 01       	movw	r18, r28
    2062:	24 59       	subi	r18, 0x94	; 148
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	42 eb       	ldi	r20, 0xB2	; 178
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	b9 01       	movw	r22, r18
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	0e 94 9c 07 	call	0xf38	; 0xf38 <F_compare>
    	/*
    	 * once the program started and get new password from new user you will continously
    	 * see the following messages
    	 */

		LCD_displayStringRowColumn(0,0,"- open");
    2072:	23 ec       	ldi	r18, 0xC3	; 195
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"+ New password");
    2080:	2a ec       	ldi	r18, 0xCA	; 202
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	a9 01       	movw	r20, r18
    208a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
    208e:	fe 01       	movw	r30, r28
    2090:	ef 5a       	subi	r30, 0xAF	; 175
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	aa e7       	ldi	r26, 0x7A	; 122
    209a:	b4 e4       	ldi	r27, 0x44	; 68
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	8e 01       	movw	r16, r28
    20a6:	03 5b       	subi	r16, 0xB3	; 179
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	fe 01       	movw	r30, r28
    20ac:	ef 5a       	subi	r30, 0xAF	; 175
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a e7       	ldi	r20, 0x7A	; 122
    20be:	53 e4       	ldi	r21, 0x43	; 67
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	f8 01       	movw	r30, r16
    20ca:	80 83       	st	Z, r24
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	a2 83       	std	Z+2, r26	; 0x02
    20d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20d2:	fe 01       	movw	r30, r28
    20d4:	e3 5b       	subi	r30, 0xB3	; 179
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	44 f4       	brge	.+16     	; 0x2100 <main+0x24e>
		__ticks = 1;
    20f0:	fe 01       	movw	r30, r28
    20f2:	e5 5b       	subi	r30, 0xB5	; 181
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	64 c0       	rjmp	.+200    	; 0x21c8 <main+0x316>
	else if (__tmp > 65535)
    2100:	fe 01       	movw	r30, r28
    2102:	e3 5b       	subi	r30, 0xB3	; 179
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	0c f0       	brlt	.+2      	; 0x2120 <main+0x26e>
    211e:	43 c0       	rjmp	.+134    	; 0x21a6 <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	fe 01       	movw	r30, r28
    2122:	ef 5a       	subi	r30, 0xAF	; 175
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8e 01       	movw	r16, r28
    2140:	05 5b       	subi	r16, 0xB5	; 181
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	f8 01       	movw	r30, r16
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
    2156:	1f c0       	rjmp	.+62     	; 0x2196 <main+0x2e4>
    2158:	fe 01       	movw	r30, r28
    215a:	e7 5b       	subi	r30, 0xB7	; 183
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	89 e1       	ldi	r24, 0x19	; 25
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	fe 01       	movw	r30, r28
    2168:	e7 5b       	subi	r30, 0xB7	; 183
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x2be>
    2174:	fe 01       	movw	r30, r28
    2176:	e7 5b       	subi	r30, 0xB7	; 183
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	de 01       	movw	r26, r28
    2180:	a5 5b       	subi	r26, 0xB5	; 181
    2182:	bf 4f       	sbci	r27, 0xFF	; 255
    2184:	fe 01       	movw	r30, r28
    2186:	e5 5b       	subi	r30, 0xB5	; 181
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	11 96       	adiw	r26, 0x01	; 1
    2192:	9c 93       	st	X, r25
    2194:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2196:	fe 01       	movw	r30, r28
    2198:	e5 5b       	subi	r30, 0xB5	; 181
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	d1 f6       	brne	.-76     	; 0x2158 <main+0x2a6>
    21a4:	27 c0       	rjmp	.+78     	; 0x21f4 <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	8e 01       	movw	r16, r28
    21a8:	05 5b       	subi	r16, 0xB5	; 181
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	fe 01       	movw	r30, r28
    21ae:	e3 5b       	subi	r30, 0xB3	; 179
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	f8 01       	movw	r30, r16
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    21c8:	de 01       	movw	r26, r28
    21ca:	a9 5b       	subi	r26, 0xB9	; 185
    21cc:	bf 4f       	sbci	r27, 0xFF	; 255
    21ce:	fe 01       	movw	r30, r28
    21d0:	e5 5b       	subi	r30, 0xB5	; 181
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	8d 93       	st	X+, r24
    21da:	9c 93       	st	X, r25
    21dc:	fe 01       	movw	r30, r28
    21de:	e9 5b       	subi	r30, 0xB9	; 185
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <main+0x334>
    21ea:	fe 01       	movw	r30, r28
    21ec:	e9 5b       	subi	r30, 0xB9	; 185
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
		_delay_ms(1000);

		//Get user option to do specific actions on the second MCU

		key = KeyPad_getPressedKey(); /* get the pressed key number */
    21f4:	0e 94 75 09 	call	0x12ea	; 0x12ea <KeyPad_getPressedKey>
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 59       	subi	r30, 0x9D	; 157
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 83       	st	Z, r24
    2200:	fe 01       	movw	r30, r28
    2202:	ed 5b       	subi	r30, 0xBD	; 189
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	aa ef       	ldi	r26, 0xFA	; 250
    220c:	b4 e4       	ldi	r27, 0x44	; 68
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	01 5c       	subi	r16, 0xC1	; 193
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	ed 5b       	subi	r30, 0xBD	; 189
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	53 e4       	ldi	r21, 0x43	; 67
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	ff 96       	adiw	r30, 0x3f	; 63
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <main+0x3b8>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e af       	std	Y+62, r25	; 0x3e
    2266:	8d af       	std	Y+61, r24	; 0x3d
    2268:	46 c0       	rjmp	.+140    	; 0x22f6 <main+0x444>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	ff 96       	adiw	r30, 0x3f	; 63
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	64 f5       	brge	.+88     	; 0x22de <main+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	fe 01       	movw	r30, r28
    2288:	ed 5b       	subi	r30, 0xBD	; 189
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e af       	std	Y+62, r25	; 0x3e
    22b2:	8d af       	std	Y+61, r24	; 0x3d
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <main+0x422>
    22b6:	89 e1       	ldi	r24, 0x19	; 25
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9c af       	std	Y+60, r25	; 0x3c
    22bc:	8b af       	std	Y+59, r24	; 0x3b
    22be:	8b ad       	ldd	r24, Y+59	; 0x3b
    22c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <main+0x410>
    22c6:	9c af       	std	Y+60, r25	; 0x3c
    22c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    22cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e af       	std	Y+62, r25	; 0x3e
    22d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <main+0x404>
    22dc:	16 c0       	rjmp	.+44     	; 0x230a <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	fe 01       	movw	r30, r28
    22e0:	ff 96       	adiw	r30, 0x3f	; 63
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e af       	std	Y+62, r25	; 0x3e
    22f4:	8d af       	std	Y+61, r24	; 0x3d
    22f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22fa:	9a af       	std	Y+58, r25	; 0x3a
    22fc:	89 af       	std	Y+57, r24	; 0x39
    22fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2300:	9a ad       	ldd	r25, Y+58	; 0x3a
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <main+0x450>
    2306:	9a af       	std	Y+58, r25	; 0x3a
    2308:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2000); /* Press time  */

		if (key =='+'){
    230a:	fe 01       	movw	r30, r28
    230c:	ed 59       	subi	r30, 0x9D	; 157
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	8b 32       	cpi	r24, 0x2B	; 43
    2314:	09 f0       	breq	.+2      	; 0x2318 <main+0x466>
    2316:	41 c1       	rjmp	.+642    	; 0x259a <main+0x6e8>
			get_pass("Enter old PW:", old_pass);
    2318:	89 ed       	ldi	r24, 0xD9	; 217
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9e 01       	movw	r18, r28
    231e:	2d 58       	subi	r18, 0x8D	; 141
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	b9 01       	movw	r22, r18
    2324:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			UART_sendByte(READY2);
    2328:	84 e1       	ldi	r24, 0x14	; 20
    232a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
			for(i=0;i<5;i++){
    232e:	fe 01       	movw	r30, r28
    2330:	ec 59       	subi	r30, 0x9C	; 156
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	10 82       	st	Z, r1
    2336:	8f c0       	rjmp	.+286    	; 0x2456 <main+0x5a4>
				while(UART_recieveByte()!=READY2){};
    2338:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    233c:	84 31       	cpi	r24, 0x14	; 20
    233e:	e1 f7       	brne	.-8      	; 0x2338 <main+0x486>
				match_pass2[i]=UART_recieveByte();
    2340:	fe 01       	movw	r30, r28
    2342:	ec 59       	subi	r30, 0x9C	; 156
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	08 2f       	mov	r16, r24
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    2350:	28 2f       	mov	r18, r24
    2352:	ce 01       	movw	r24, r28
    2354:	86 58       	subi	r24, 0x86	; 134
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	fc 01       	movw	r30, r24
    235a:	e0 0f       	add	r30, r16
    235c:	f1 1f       	adc	r31, r17
    235e:	20 83       	st	Z, r18
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a8 ec       	ldi	r26, 0xC8	; 200
    2366:	b2 e4       	ldi	r27, 0x42	; 66
    2368:	8d ab       	std	Y+53, r24	; 0x35
    236a:	9e ab       	std	Y+54, r25	; 0x36
    236c:	af ab       	std	Y+55, r26	; 0x37
    236e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6d a9       	ldd	r22, Y+53	; 0x35
    2372:	7e a9       	ldd	r23, Y+54	; 0x36
    2374:	8f a9       	ldd	r24, Y+55	; 0x37
    2376:	98 ad       	ldd	r25, Y+56	; 0x38
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	53 e4       	ldi	r21, 0x43	; 67
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	89 ab       	std	Y+49, r24	; 0x31
    238a:	9a ab       	std	Y+50, r25	; 0x32
    238c:	ab ab       	std	Y+51, r26	; 0x33
    238e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2390:	69 a9       	ldd	r22, Y+49	; 0x31
    2392:	7a a9       	ldd	r23, Y+50	; 0x32
    2394:	8b a9       	ldd	r24, Y+51	; 0x33
    2396:	9c a9       	ldd	r25, Y+52	; 0x34
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <main+0x500>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	98 ab       	std	Y+48, r25	; 0x30
    23ae:	8f a7       	std	Y+47, r24	; 0x2f
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <main+0x57e>
	else if (__tmp > 65535)
    23b2:	69 a9       	ldd	r22, Y+49	; 0x31
    23b4:	7a a9       	ldd	r23, Y+50	; 0x32
    23b6:	8b a9       	ldd	r24, Y+51	; 0x33
    23b8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <main+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6d a9       	ldd	r22, Y+53	; 0x35
    23cc:	7e a9       	ldd	r23, Y+54	; 0x36
    23ce:	8f a9       	ldd	r24, Y+55	; 0x37
    23d0:	98 ad       	ldd	r25, Y+56	; 0x38
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	98 ab       	std	Y+48, r25	; 0x30
    23f0:	8f a7       	std	Y+47, r24	; 0x2f
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <main+0x560>
    23f4:	89 e1       	ldi	r24, 0x19	; 25
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9e a7       	std	Y+46, r25	; 0x2e
    23fa:	8d a7       	std	Y+45, r24	; 0x2d
    23fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    23fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <main+0x54e>
    2404:	9e a7       	std	Y+46, r25	; 0x2e
    2406:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	98 ab       	std	Y+48, r25	; 0x30
    2410:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <main+0x542>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <main+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	9c a7       	std	Y+44, r25	; 0x2c
    2436:	8b a7       	std	Y+43, r24	; 0x2b
    2438:	8b a5       	ldd	r24, Y+43	; 0x2b
    243a:	9c a5       	ldd	r25, Y+44	; 0x2c
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <main+0x58a>
    2440:	9c a7       	std	Y+44, r25	; 0x2c
    2442:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000); /* Press time  */

		if (key =='+'){
			get_pass("Enter old PW:", old_pass);
			UART_sendByte(READY2);
			for(i=0;i<5;i++){
    2444:	de 01       	movw	r26, r28
    2446:	ac 59       	subi	r26, 0x9C	; 156
    2448:	bf 4f       	sbci	r27, 0xFF	; 255
    244a:	fe 01       	movw	r30, r28
    244c:	ec 59       	subi	r30, 0x9C	; 156
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	8c 93       	st	X, r24
    2456:	fe 01       	movw	r30, r28
    2458:	ec 59       	subi	r30, 0x9C	; 156
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	85 30       	cpi	r24, 0x05	; 5
    2460:	08 f4       	brcc	.+2      	; 0x2464 <main+0x5b2>
    2462:	6a cf       	rjmp	.-300    	; 0x2338 <main+0x486>
				while(UART_recieveByte()!=READY2){};
				match_pass2[i]=UART_recieveByte();
				_delay_ms(100);
			}
			//Check_Stranger(match_pass2,old_pass,"reEnter old PW:");
			F_compare(match_pass2,old_pass,"reEnter old PW:",READY3);
    2464:	ce 01       	movw	r24, r28
    2466:	86 58       	subi	r24, 0x86	; 134
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	9e 01       	movw	r18, r28
    246c:	2d 58       	subi	r18, 0x8D	; 141
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	47 ee       	ldi	r20, 0xE7	; 231
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	b9 01       	movw	r22, r18
    2476:	2e e1       	ldi	r18, 0x1E	; 30
    2478:	0e 94 9c 07 	call	0xf38	; 0xf38 <F_compare>
			get_pass("Enter new PW:", new_pass);
    247c:	87 ef       	ldi	r24, 0xF7	; 247
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9e 01       	movw	r18, r28
    2482:	2b 59       	subi	r18, 0x9B	; 155
    2484:	3f 4f       	sbci	r19, 0xFF	; 255
    2486:	b9 01       	movw	r22, r18
    2488:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e2       	ldi	r26, 0x20	; 32
    2492:	b1 e4       	ldi	r27, 0x41	; 65
    2494:	8f a3       	std	Y+39, r24	; 0x27
    2496:	98 a7       	std	Y+40, r25	; 0x28
    2498:	a9 a7       	std	Y+41, r26	; 0x29
    249a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	6f a1       	ldd	r22, Y+39	; 0x27
    249e:	78 a5       	ldd	r23, Y+40	; 0x28
    24a0:	89 a5       	ldd	r24, Y+41	; 0x29
    24a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	53 e4       	ldi	r21, 0x43	; 67
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8b a3       	std	Y+35, r24	; 0x23
    24b6:	9c a3       	std	Y+36, r25	; 0x24
    24b8:	ad a3       	std	Y+37, r26	; 0x25
    24ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24bc:	6b a1       	ldd	r22, Y+35	; 0x23
    24be:	7c a1       	ldd	r23, Y+36	; 0x24
    24c0:	8d a1       	ldd	r24, Y+37	; 0x25
    24c2:	9e a1       	ldd	r25, Y+38	; 0x26
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <main+0x62c>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9a a3       	std	Y+34, r25	; 0x22
    24da:	89 a3       	std	Y+33, r24	; 0x21
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <main+0x6aa>
	else if (__tmp > 65535)
    24de:	6b a1       	ldd	r22, Y+35	; 0x23
    24e0:	7c a1       	ldd	r23, Y+36	; 0x24
    24e2:	8d a1       	ldd	r24, Y+37	; 0x25
    24e4:	9e a1       	ldd	r25, Y+38	; 0x26
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <main+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	6f a1       	ldd	r22, Y+39	; 0x27
    24f8:	78 a5       	ldd	r23, Y+40	; 0x28
    24fa:	89 a5       	ldd	r24, Y+41	; 0x29
    24fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
    251e:	0f c0       	rjmp	.+30     	; 0x253e <main+0x68c>
    2520:	89 e1       	ldi	r24, 0x19	; 25
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	98 a3       	std	Y+32, r25	; 0x20
    2526:	8f 8f       	std	Y+31, r24	; 0x1f
    2528:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252a:	98 a1       	ldd	r25, Y+32	; 0x20
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <main+0x67a>
    2530:	98 a3       	std	Y+32, r25	; 0x20
    2532:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	9a a3       	std	Y+34, r25	; 0x22
    253c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	89 a1       	ldd	r24, Y+33	; 0x21
    2540:	9a a1       	ldd	r25, Y+34	; 0x22
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	69 f7       	brne	.-38     	; 0x2520 <main+0x66e>
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <main+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
    255c:	89 a1       	ldd	r24, Y+33	; 0x21
    255e:	9a a1       	ldd	r25, Y+34	; 0x22
    2560:	9e 8f       	std	Y+30, r25	; 0x1e
    2562:	8d 8f       	std	Y+29, r24	; 0x1d
    2564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2566:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <main+0x6b6>
    256c:	9e 8f       	std	Y+30, r25	; 0x1e
    256e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			get_pass("reEnter new PW:",match_pass);
    2570:	85 e0       	ldi	r24, 0x05	; 5
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	9e 01       	movw	r18, r28
    2576:	24 59       	subi	r18, 0x94	; 148
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	b9 01       	movw	r22, r18
    257c:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			F_compare(new_pass,match_pass,"reEnter new PW:",READY1);
    2580:	ce 01       	movw	r24, r28
    2582:	8b 59       	subi	r24, 0x9B	; 155
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	9e 01       	movw	r18, r28
    2588:	24 59       	subi	r18, 0x94	; 148
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	45 e0       	ldi	r20, 0x05	; 5
    258e:	51 e0       	ldi	r21, 0x01	; 1
    2590:	b9 01       	movw	r22, r18
    2592:	2a e0       	ldi	r18, 0x0A	; 10
    2594:	0e 94 9c 07 	call	0xf38	; 0xf38 <F_compare>
    2598:	4f c1       	rjmp	.+670    	; 0x2838 <main+0x986>
		}

		else if(key=='-'){
    259a:	fe 01       	movw	r30, r28
    259c:	ed 59       	subi	r30, 0x9D	; 157
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	8d 32       	cpi	r24, 0x2D	; 45
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <main+0x6f6>
    25a6:	48 c1       	rjmp	.+656    	; 0x2838 <main+0x986>
			get_pass("Enter your PW:", new_pass);
    25a8:	83 ea       	ldi	r24, 0xA3	; 163
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9e 01       	movw	r18, r28
    25ae:	2b 59       	subi	r18, 0x9B	; 155
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
    25b2:	b9 01       	movw	r22, r18
    25b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			UART_sendByte(READY6);
    25b8:	8c e3       	ldi	r24, 0x3C	; 60
    25ba:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
			for(i=0;i<5;i++){
    25be:	fe 01       	movw	r30, r28
    25c0:	ec 59       	subi	r30, 0x9C	; 156
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	10 82       	st	Z, r1
    25c6:	8f c0       	rjmp	.+286    	; 0x26e6 <main+0x834>
				while(UART_recieveByte()!=READY6){};
    25c8:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    25cc:	8c 33       	cpi	r24, 0x3C	; 60
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <main+0x716>
				match_pass2[i]=UART_recieveByte();
    25d0:	fe 01       	movw	r30, r28
    25d2:	ec 59       	subi	r30, 0x9C	; 156
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	08 2f       	mov	r16, r24
    25da:	10 e0       	ldi	r17, 0x00	; 0
    25dc:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    25e0:	28 2f       	mov	r18, r24
    25e2:	ce 01       	movw	r24, r28
    25e4:	86 58       	subi	r24, 0x86	; 134
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	fc 01       	movw	r30, r24
    25ea:	e0 0f       	add	r30, r16
    25ec:	f1 1f       	adc	r31, r17
    25ee:	20 83       	st	Z, r18
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a8 ec       	ldi	r26, 0xC8	; 200
    25f6:	b2 e4       	ldi	r27, 0x42	; 66
    25f8:	89 8f       	std	Y+25, r24	; 0x19
    25fa:	9a 8f       	std	Y+26, r25	; 0x1a
    25fc:	ab 8f       	std	Y+27, r26	; 0x1b
    25fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	69 8d       	ldd	r22, Y+25	; 0x19
    2602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a e7       	ldi	r20, 0x7A	; 122
    260e:	53 e4       	ldi	r21, 0x43	; 67
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8d 8b       	std	Y+21, r24	; 0x15
    261a:	9e 8b       	std	Y+22, r25	; 0x16
    261c:	af 8b       	std	Y+23, r26	; 0x17
    261e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <main+0x790>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9c 8b       	std	Y+20, r25	; 0x14
    263e:	8b 8b       	std	Y+19, r24	; 0x13
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <main+0x80e>
	else if (__tmp > 65535)
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <main+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	69 8d       	ldd	r22, Y+25	; 0x19
    265c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9c 8b       	std	Y+20, r25	; 0x14
    2680:	8b 8b       	std	Y+19, r24	; 0x13
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <main+0x7f0>
    2684:	89 e1       	ldi	r24, 0x19	; 25
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9a 8b       	std	Y+18, r25	; 0x12
    268a:	89 8b       	std	Y+17, r24	; 0x11
    268c:	89 89       	ldd	r24, Y+17	; 0x11
    268e:	9a 89       	ldd	r25, Y+18	; 0x12
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <main+0x7de>
    2694:	9a 8b       	std	Y+18, r25	; 0x12
    2696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9c 8b       	std	Y+20, r25	; 0x14
    26a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	8b 89       	ldd	r24, Y+19	; 0x13
    26a4:	9c 89       	ldd	r25, Y+20	; 0x14
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <main+0x7d2>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <main+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6d 89       	ldd	r22, Y+21	; 0x15
    26ae:	7e 89       	ldd	r23, Y+22	; 0x16
    26b0:	8f 89       	ldd	r24, Y+23	; 0x17
    26b2:	98 8d       	ldd	r25, Y+24	; 0x18
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9c 8b       	std	Y+20, r25	; 0x14
    26be:	8b 8b       	std	Y+19, r24	; 0x13
    26c0:	8b 89       	ldd	r24, Y+19	; 0x13
    26c2:	9c 89       	ldd	r25, Y+20	; 0x14
    26c4:	98 8b       	std	Y+16, r25	; 0x10
    26c6:	8f 87       	std	Y+15, r24	; 0x0f
    26c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ca:	98 89       	ldd	r25, Y+16	; 0x10
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <main+0x81a>
    26d0:	98 8b       	std	Y+16, r25	; 0x10
    26d2:	8f 87       	std	Y+15, r24	; 0x0f
		}

		else if(key=='-'){
			get_pass("Enter your PW:", new_pass);
			UART_sendByte(READY6);
			for(i=0;i<5;i++){
    26d4:	de 01       	movw	r26, r28
    26d6:	ac 59       	subi	r26, 0x9C	; 156
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	ec 59       	subi	r30, 0x9C	; 156
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	8c 93       	st	X, r24
    26e6:	fe 01       	movw	r30, r28
    26e8:	ec 59       	subi	r30, 0x9C	; 156
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	85 30       	cpi	r24, 0x05	; 5
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <main+0x842>
    26f2:	6a cf       	rjmp	.-300    	; 0x25c8 <main+0x716>
				while(UART_recieveByte()!=READY6){};
				match_pass2[i]=UART_recieveByte();
				_delay_ms(100);
			}

			F_compare(match_pass2,new_pass,"reEnter your PW:",READY7);
    26f4:	ce 01       	movw	r24, r28
    26f6:	86 58       	subi	r24, 0x86	; 134
    26f8:	9f 4f       	sbci	r25, 0xFF	; 255
    26fa:	9e 01       	movw	r18, r28
    26fc:	2b 59       	subi	r18, 0x9B	; 155
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	42 eb       	ldi	r20, 0xB2	; 178
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	b9 01       	movw	r22, r18
    2706:	26 e4       	ldi	r18, 0x46	; 70
    2708:	0e 94 9c 07 	call	0xf38	; 0xf38 <F_compare>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a8 ec       	ldi	r26, 0xC8	; 200
    2712:	b2 e4       	ldi	r27, 0x42	; 66
    2714:	8b 87       	std	Y+11, r24	; 0x0b
    2716:	9c 87       	std	Y+12, r25	; 0x0c
    2718:	ad 87       	std	Y+13, r26	; 0x0d
    271a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a e7       	ldi	r20, 0x7A	; 122
    272a:	53 e4       	ldi	r21, 0x43	; 67
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	8f 83       	std	Y+7, r24	; 0x07
    2736:	98 87       	std	Y+8, r25	; 0x08
    2738:	a9 87       	std	Y+9, r26	; 0x09
    273a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	2c f4       	brge	.+10     	; 0x275e <main+0x8ac>
		__ticks = 1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	3f c0       	rjmp	.+126    	; 0x27dc <main+0x92a>
	else if (__tmp > 65535)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	57 e4       	ldi	r21, 0x47	; 71
    276e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	4c f5       	brge	.+82     	; 0x27c8 <main+0x916>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	6b 85       	ldd	r22, Y+11	; 0x0b
    2778:	7c 85       	ldd	r23, Y+12	; 0x0c
    277a:	8d 85       	ldd	r24, Y+13	; 0x0d
    277c:	9e 85       	ldd	r25, Y+14	; 0x0e
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e2       	ldi	r20, 0x20	; 32
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	0f c0       	rjmp	.+30     	; 0x27be <main+0x90c>
    27a0:	89 e1       	ldi	r24, 0x19	; 25
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <main+0x8fa>
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <main+0x8ee>
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <main+0x93e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <main+0x936>
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);

			LCD_sendCommand(CLEAR_COMMAND);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"DOOR OPEN");
    27f6:	25 e1       	ldi	r18, 0x15	; 21
    27f8:	31 e0       	ldi	r19, 0x01	; 1
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	a9 01       	movw	r20, r18
    2800:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
			timer0_init_normal_mode(T0_F_CPU_1024, 0);
    2804:	85 e0       	ldi	r24, 0x05	; 5
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	0e 94 20 14 	call	0x2840	; 0x2840 <timer0_init_normal_mode>
			while (second != 2)
    280c:	80 91 33 01 	lds	r24, 0x0133
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	e1 f7       	brne	.-8      	; 0x280c <main+0x95a>
				;
			second = 0;
    2814:	10 92 33 01 	sts	0x0133, r1

			LCD_sendCommand(CLEAR_COMMAND);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"DOOR CLOSE");
    281e:	2f e1       	ldi	r18, 0x1F	; 31
    2820:	31 e0       	ldi	r19, 0x01	; 1
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	a9 01       	movw	r20, r18
    2828:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
			while (second != 2)
    282c:	80 91 33 01 	lds	r24, 0x0133
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	e1 f7       	brne	.-8      	; 0x282c <main+0x97a>
				;
			second = 0;
    2834:	10 92 33 01 	sts	0x0133, r1
		}
		LCD_sendCommand(CLEAR_COMMAND);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_sendCommand>
    283e:	19 cc       	rjmp	.-1998   	; 0x2072 <main+0x1c0>

00002840 <timer0_init_normal_mode>:
 *  Author: Habiba Mahmoud
 */
#include "timer0.h"
extern volatile uint8 second;
#if (MODE==NORMAL)
	void timer0_init_normal_mode(uint8 a_Prescaler, uint8 intitial_value){
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <timer0_init_normal_mode+0x6>
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	6a 83       	std	Y+2, r22	; 0x02
			Tick equation = clock period * ((255 - a_TIMER0_Bottom) + 1).
			For a_Prescaler: You can also use T0_NO_CLOCK, T0_F_CPU_, T0_F_CPU_8,
			T0_F_CPU_64, T0_F_CPU_256, T0_F_CPU_1024.

			*/
		second=0;
    284e:	10 92 33 01 	sts	0x0133, r1
		SREG  |= (1<<7);    // global interrupt bit.
    2852:	af e5       	ldi	r26, 0x5F	; 95
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ef e5       	ldi	r30, 0x5F	; 95
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	80 68       	ori	r24, 0x80	; 128
    285e:	8c 93       	st	X, r24
		TCNT0 = intitial_value;  // the value that the timer will start count from.
    2860:	e2 e5       	ldi	r30, 0x52	; 82
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	80 83       	st	Z, r24
		TIMSK |= (1<<TOIE0);    // interrupt enable bit for Timer0 in normal mode.
    2868:	a9 e5       	ldi	r26, 0x59	; 89
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e9 e5       	ldi	r30, 0x59	; 89
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	81 60       	ori	r24, 0x01	; 1
    2874:	8c 93       	st	X, r24
		TCCR0 = (1<<FOC0);    // this bit is set to one for any non-PWM mode.
    2876:	e3 e5       	ldi	r30, 0x53	; 83
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 e8       	ldi	r24, 0x80	; 128
    287c:	80 83       	st	Z, r24
		TCCR0 = (TCCR0 & 0xF8) | (a_Prescaler & 0x07);  // Prescaler.
    287e:	a3 e5       	ldi	r26, 0x53	; 83
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e3 e5       	ldi	r30, 0x53	; 83
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	98 2f       	mov	r25, r24
    288a:	98 7f       	andi	r25, 0xF8	; 248
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	87 70       	andi	r24, 0x07	; 7
    2890:	89 2b       	or	r24, r25
    2892:	8c 93       	st	X, r24
	}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <timer0_deinit>:
		TIMSK |= (1<<OCIE0);  // interrupt enable bit for Timer0 in compare mode.
		TCCR0 = (1<<FOC0) | (1<<WGM01);  //  enable compare mode.
		TCCR0 = (TCCR0 & 0xF8) | (a_Prescaler & 0x07);  // Prescaler.
	}
#endif
void timer0_deinit(void){
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * This function is set to Deinit(stop) Time0.
	 */
	TCCR0 = 0;
    28a6:	e3 e5       	ldi	r30, 0x53	; 83
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	10 82       	st	Z, r1
}
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28ba:	eb e2       	ldi	r30, 0x2B	; 43
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28c2:	ea e2       	ldi	r30, 0x2A	; 42
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	88 e1       	ldi	r24, 0x18	; 24
    28c8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    28ca:	e0 e4       	ldi	r30, 0x40	; 64
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	86 e8       	ldi	r24, 0x86	; 134
    28d0:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    28d2:	e0 e4       	ldi	r30, 0x40	; 64
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    28d8:	e9 e2       	ldi	r30, 0x29	; 41
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	8c e0       	ldi	r24, 0x0C	; 12
    28de:	80 83       	st	Z, r24
}
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28f2:	eb e2       	ldi	r30, 0x2B	; 43
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	80 72       	andi	r24, 0x20	; 32
    28fe:	90 70       	andi	r25, 0x00	; 0
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	b9 f3       	breq	.-18     	; 0x28f2 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2904:	ec e2       	ldi	r30, 0x2C	; 44
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    291c:	eb e2       	ldi	r30, 0x2B	; 43
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	dc f7       	brge	.-10     	; 0x291c <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2926:	ec e2       	ldi	r30, 0x2C	; 44
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
}
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	00 d0       	rcall	.+0      	; 0x2938 <UART_sendString+0x6>
    2938:	0f 92       	push	r0
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	9b 83       	std	Y+3, r25	; 0x03
    2940:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2942:	19 82       	std	Y+1, r1	; 0x01
    2944:	0e c0       	rjmp	.+28     	; 0x2962 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	fc 01       	movw	r30, r24
    2952:	e2 0f       	add	r30, r18
    2954:	f3 1f       	adc	r31, r19
    2956:	80 81       	ld	r24, Z
    2958:	0e 94 73 14 	call	0x28e6	; 0x28e6 <UART_sendByte>
		i++;
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	fc 01       	movw	r30, r24
    296e:	e2 0f       	add	r30, r18
    2970:	f3 1f       	adc	r31, r19
    2972:	80 81       	ld	r24, Z
    2974:	88 23       	and	r24, r24
    2976:	39 f7       	brne	.-50     	; 0x2946 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <UART_receiveString+0xa>
    298e:	0f 92       	push	r0
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	9b 83       	std	Y+3, r25	; 0x03
    2996:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2998:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	8c 01       	movw	r16, r24
    29a6:	02 0f       	add	r16, r18
    29a8:	13 1f       	adc	r17, r19
    29aa:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    29ae:	f8 01       	movw	r30, r16
    29b0:	80 83       	st	Z, r24
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	8c 01       	movw	r16, r24
    29c6:	02 0f       	add	r16, r18
    29c8:	13 1f       	adc	r17, r19
    29ca:	0e 94 8a 14 	call	0x2914	; 0x2914 <UART_recieveByte>
    29ce:	f8 01       	movw	r30, r16
    29d0:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 0f       	add	r30, r18
    29e0:	f3 1f       	adc	r31, r19
    29e2:	80 81       	ld	r24, Z
    29e4:	83 32       	cpi	r24, 0x23	; 35
    29e6:	31 f7       	brne	.-52     	; 0x29b4 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	10 82       	st	Z, r1
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <__prologue_saves__>:
    2a0a:	2f 92       	push	r2
    2a0c:	3f 92       	push	r3
    2a0e:	4f 92       	push	r4
    2a10:	5f 92       	push	r5
    2a12:	6f 92       	push	r6
    2a14:	7f 92       	push	r7
    2a16:	8f 92       	push	r8
    2a18:	9f 92       	push	r9
    2a1a:	af 92       	push	r10
    2a1c:	bf 92       	push	r11
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	ca 1b       	sub	r28, r26
    2a34:	db 0b       	sbc	r29, r27
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	09 94       	ijmp

00002a42 <__epilogue_restores__>:
    2a42:	2a 88       	ldd	r2, Y+18	; 0x12
    2a44:	39 88       	ldd	r3, Y+17	; 0x11
    2a46:	48 88       	ldd	r4, Y+16	; 0x10
    2a48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a54:	b9 84       	ldd	r11, Y+9	; 0x09
    2a56:	c8 84       	ldd	r12, Y+8	; 0x08
    2a58:	df 80       	ldd	r13, Y+7	; 0x07
    2a5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a60:	1b 81       	ldd	r17, Y+3	; 0x03
    2a62:	aa 81       	ldd	r26, Y+2	; 0x02
    2a64:	b9 81       	ldd	r27, Y+1	; 0x01
    2a66:	ce 0f       	add	r28, r30
    2a68:	d1 1d       	adc	r29, r1
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	ed 01       	movw	r28, r26
    2a76:	08 95       	ret

00002a78 <itoa>:
    2a78:	fb 01       	movw	r30, r22
    2a7a:	9f 01       	movw	r18, r30
    2a7c:	e8 94       	clt
    2a7e:	42 30       	cpi	r20, 0x02	; 2
    2a80:	c4 f0       	brlt	.+48     	; 0x2ab2 <itoa+0x3a>
    2a82:	45 32       	cpi	r20, 0x25	; 37
    2a84:	b4 f4       	brge	.+44     	; 0x2ab2 <itoa+0x3a>
    2a86:	4a 30       	cpi	r20, 0x0A	; 10
    2a88:	29 f4       	brne	.+10     	; 0x2a94 <itoa+0x1c>
    2a8a:	97 fb       	bst	r25, 7
    2a8c:	1e f4       	brtc	.+6      	; 0x2a94 <itoa+0x1c>
    2a8e:	90 95       	com	r25
    2a90:	81 95       	neg	r24
    2a92:	9f 4f       	sbci	r25, 0xFF	; 255
    2a94:	64 2f       	mov	r22, r20
    2a96:	77 27       	eor	r23, r23
    2a98:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__udivmodhi4>
    2a9c:	80 5d       	subi	r24, 0xD0	; 208
    2a9e:	8a 33       	cpi	r24, 0x3A	; 58
    2aa0:	0c f0       	brlt	.+2      	; 0x2aa4 <itoa+0x2c>
    2aa2:	89 5d       	subi	r24, 0xD9	; 217
    2aa4:	81 93       	st	Z+, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	a1 f7       	brne	.-24     	; 0x2a94 <itoa+0x1c>
    2aac:	16 f4       	brtc	.+4      	; 0x2ab2 <itoa+0x3a>
    2aae:	5d e2       	ldi	r21, 0x2D	; 45
    2ab0:	51 93       	st	Z+, r21
    2ab2:	10 82       	st	Z, r1
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <strrev>

00002aba <strrev>:
    2aba:	dc 01       	movw	r26, r24
    2abc:	fc 01       	movw	r30, r24
    2abe:	67 2f       	mov	r22, r23
    2ac0:	71 91       	ld	r23, Z+
    2ac2:	77 23       	and	r23, r23
    2ac4:	e1 f7       	brne	.-8      	; 0x2abe <strrev+0x4>
    2ac6:	32 97       	sbiw	r30, 0x02	; 2
    2ac8:	04 c0       	rjmp	.+8      	; 0x2ad2 <strrev+0x18>
    2aca:	7c 91       	ld	r23, X
    2acc:	6d 93       	st	X+, r22
    2ace:	70 83       	st	Z, r23
    2ad0:	62 91       	ld	r22, -Z
    2ad2:	ae 17       	cp	r26, r30
    2ad4:	bf 07       	cpc	r27, r31
    2ad6:	c8 f3       	brcs	.-14     	; 0x2aca <strrev+0x10>
    2ad8:	08 95       	ret

00002ada <__udivmodhi4>:
    2ada:	aa 1b       	sub	r26, r26
    2adc:	bb 1b       	sub	r27, r27
    2ade:	51 e1       	ldi	r21, 0x11	; 17
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <__udivmodhi4_ep>

00002ae2 <__udivmodhi4_loop>:
    2ae2:	aa 1f       	adc	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	a6 17       	cp	r26, r22
    2ae8:	b7 07       	cpc	r27, r23
    2aea:	10 f0       	brcs	.+4      	; 0x2af0 <__udivmodhi4_ep>
    2aec:	a6 1b       	sub	r26, r22
    2aee:	b7 0b       	sbc	r27, r23

00002af0 <__udivmodhi4_ep>:
    2af0:	88 1f       	adc	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	5a 95       	dec	r21
    2af6:	a9 f7       	brne	.-22     	; 0x2ae2 <__udivmodhi4_loop>
    2af8:	80 95       	com	r24
    2afa:	90 95       	com	r25
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	08 95       	ret

00002b02 <_exit>:
    2b02:	f8 94       	cli

00002b04 <__stop_program>:
    2b04:	ff cf       	rjmp	.-2      	; 0x2b04 <__stop_program>
